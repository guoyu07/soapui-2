{
  super();
  conflicts=new JPanel();
  conflicts.setLayout(new BorderLayout());
  auto=new JCheckBox("Auto-Resolve");
  auto.setToolTipText("Automatically modify inferred schema from received Responses");
  auto.setOpaque(false);
  UISupport.setFixedSize(auto,120,20);
  XmlBeansSettingsImpl settings=getRequest().getSettings();
  if (settings.isSet(AUTO_INFER_SCHEMAS)) {
    auto.setSelected(settings.getBoolean(AUTO_INFER_SCHEMAS));
  }
  auto.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      getRequest().getSettings().setBoolean(AUTO_INFER_SCHEMAS,auto.isSelected());
    }
  }
);
  resolveButton=new JButton("Resolve conflicts");
  resolveButton.setEnabled(false);
  resolveButton.setActionCommand("resolve");
  resolveButton.addActionListener(this);
  JXToolBar toolbar=UISupport.createToolbar();
  toolbar.addFixed(auto);
  toolbar.addFixed(resolveButton);
  log=new JLogList("Schema log");
  conflicts.add(toolbar,BorderLayout.NORTH);
  conflicts.add(log,BorderLayout.CENTER);
  addTab("Conflicts",conflicts);
  schemaList=new JList(InferredSchemaManager.getInferredSchema(service).getNamespaces());
  schemaList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  schemaList.addListSelectionListener(this);
  toolbar=UISupport.createToolbar();
  toolbar.addFixed(UISupport.createToolbarButton(new RemoveNamespaceAction()));
  JPanel listPanel=new JPanel();
  listPanel.setLayout(new BorderLayout());
  listPanel.add(toolbar,BorderLayout.NORTH);
  listPanel.add(new JScrollPane(schemaList),BorderLayout.CENTER);
  xsd=SyntaxEditorUtil.createDefaultXmlSyntaxTextArea();
  xsd.setEditable(false);
  update();
  addTab("Schemas",new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,listPanel,new JScrollPane(xsd)));
}
