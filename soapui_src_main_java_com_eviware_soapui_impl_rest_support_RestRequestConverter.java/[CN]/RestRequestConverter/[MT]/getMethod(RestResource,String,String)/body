{
  WsdlProject project=resource.getService().getProject();
  if (!autoConvert.containsKey(project)) {
    autoConvert.put(project,UISupport.confirm("The model for REST requests has changed slightly,\r\n" + "introducing a new REST Method item in-between each REST Resource and Request.\r\n" + "Any existing REST Request must now be placed under either an existing Method or a new one, "+ "either automatically or manually.\r\n\r\nWould You like SoapUI to do this automatically using the default values?","Update REST model for project: " + project.getName()));
  }
  RestMethod method=null;
  List<String> options=new ArrayList<String>();
  for (int c=0; c < resource.getRestMethodCount(); c++) {
    RestMethod restMethod=resource.getRestMethodAt(c);
    if (restMethod.getMethod().toString().equals(methodType))     options.add(restMethod.getName());
  }
  if (autoConvert.get(project)) {
    if (options.size() > 0) {
      method=resource.getRestMethodByName(options.get(0));
      log.info("Placed request '" + requestName + "' under method '"+ method.getName()+ "' in Resource '"+ resource.getName()+ "'.");
    }
 else {
      method=resource.addNewMethod(methodType + " Method");
      method.setMethod(RestRequestInterface.HttpMethod.valueOf(methodType));
      log.info("Created new Method for Resource '" + resource.getName() + "'.");
    }
  }
 else {
    options.add("[Create new REST Method]");
    if (requestName == null)     requestName="REST Request";
    String message="Select REST Method to place \"" + resource.getName() + " > "+ requestName+ "\" under.";
    Object op=UISupport.prompt(message,"Migrate REST Request",options.toArray());
    if (op != null) {
      int ix=options.indexOf(op);
      if (ix != -1 && ix != options.size() - 1) {
        method=resource.getRestMethodByName((String)op);
      }
    }
 else     throw new RestConversionException("Cannot get RestMethod selection!");
    if (method == null) {
      String name=UISupport.prompt("Name for REST " + methodType + " Method","Create new REST Method",methodType + " Method");
      if (name == null)       throw new RestConversionException("Cannot get name for RestMethod!");
      method=resource.addNewMethod(name);
      method.setMethod(RestRequestInterface.HttpMethod.valueOf(methodType));
    }
  }
  return method;
}
