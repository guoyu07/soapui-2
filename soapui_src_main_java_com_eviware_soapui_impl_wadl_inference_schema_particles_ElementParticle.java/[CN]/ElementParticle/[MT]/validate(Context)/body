{
  context.cd(name);
  context.getCursor().push();
  String nil=context.getCursor().getAttributeText(new QName(Settings.xsins,"nil"));
  if (nil != null && nil.equals("true")) {
    if (getAttribute("nillable") == null || !getAttribute("nillable").equals("true")) {
      if (context.getHandler().callback(ConflictHandler.Event.MODIFICATION,ConflictHandler.Type.ELEMENT,getName(),context.getPath(),"Non-nillable element is nil.")) {
        setAttribute("nillable","true");
      }
 else       throw new XmlException("Non-nillable element is nil!");
    }
    context.putAttribute("nil","true");
  }
  Type newType=type.validate(context);
  if (newType != type) {
    String problem="Illegal content for element '" + name + "' with type '"+ type.getName()+ "'.";
    if (type instanceof TypeReferenceType || context.getHandler().callback(ConflictHandler.Event.MODIFICATION,ConflictHandler.Type.ELEMENT,getName(),context.getPath(),"Illegal content.")) {
      type=newType;
      context.getCursor().pop();
      context.up();
      validate(context);
      return;
    }
 else     throw new XmlException(problem);
  }
  context.clearAttribute("nil");
  context.up();
  context.getCursor().pop();
}
