{
  String messageContent=null;
  String encoding=request.getCharacterEncoding();
  if (encoding != null) {
    encoding=StringUtils.unquote(encoding);
  }
  ServletInputStream is=request.getInputStream();
  if (is.markSupported() && request.getContentLength() > 0) {
    is.mark(request.getContentLength());
  }
  ByteArrayOutputStream out=Tools.readAll(is,Tools.READ_ALL);
  byte[] data=out.toByteArray();
  if (is.markSupported() && request.getContentLength() > 0) {
    try {
      is.reset();
    }
 catch (    IOException e) {
      SoapUI.logError(e);
    }
  }
  String compressionAlg=HttpClientSupport.getCompressionType(request.getContentType(),getRequestHeaders().get("Content-Encoding",(String)null));
  if (compressionAlg != null) {
    try {
      data=CompressionSupport.decompress(compressionAlg,data);
    }
 catch (    Exception e) {
      IOException ioe=new IOException("Decompression of response failed");
      ioe.initCause(e);
      throw ioe;
    }
  }
  int contentOffset=0;
  String contentType=request.getContentType();
  if (contentType != null && data.length > 0) {
    if (contentType.toLowerCase().endsWith("xml")) {
      if (data.length > 3 && data[0] == (byte)239 && data[1] == (byte)187 && data[2] == (byte)191) {
        encoding="UTF-8";
        contentOffset=3;
      }
    }
    encoding=StringUtils.unquote(encoding);
    messageContent=encoding == null ? new String(data) : new String(data,contentOffset,(int)(data.length - contentOffset),encoding);
  }
  if (encoding == null) {
    encoding="UTF-8";
  }
  if (messageContent == null) {
    messageContent=new String(data,encoding);
  }
  return messageContent;
}
