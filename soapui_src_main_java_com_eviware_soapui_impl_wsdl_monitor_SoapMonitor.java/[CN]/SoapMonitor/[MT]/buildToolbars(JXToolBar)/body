{
  toolbar=UISupport.createSmallToolbar();
  mainToolbar.addFixed(startButton=UISupport.createToolbarButton(UISupport.createImageIcon("/start.png")));
  mainToolbar.addFixed(stopButton=UISupport.createToolbarButton(UISupport.createImageIcon("/stop.png")));
  mainToolbar.addFixed(optionsButton=UISupport.createToolbarButton(new SoapMonitorOptionsAction()));
  toolbar.addFixed(createRequestButton=UISupport.createToolbarButton(UISupport.createImageIcon("/soap_request.png")));
  toolbar.addFixed(addToTestCaseButton=UISupport.createToolbarButton(UISupport.createImageIcon("/testcase.png")));
  toolbar.addFixed(addToMockServiceButton=UISupport.createToolbarButton(UISupport.createImageIcon("/soap_virt.png")));
  toolbar.addFixed(clearButton=UISupport.createToolbarButton(UISupport.createImageIcon("/clear.png")));
  startButton.setToolTipText("Starts the HTTP Monitor as configured");
  stopButton.setToolTipText("Stops the HTTP Monitor");
  optionsButton.setToolTipText("Sets Monitor Options");
  clearButton.setToolTipText("Clear all/selected messages from the log");
  createRequestButton.setToolTipText("Creates requests from selected messages");
  addToTestCaseButton.setToolTipText("Adds selected requests to a test case");
  addToMockServiceButton.setToolTipText("Adds selected responses to a mock service");
  createRequestButton.setEnabled(false);
  addToMockServiceButton.setEnabled(false);
  addToTestCaseButton.setEnabled(false);
  startButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      start();
    }
  }
);
  stopButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      stop();
    }
  }
);
  clearButton.addActionListener(new ClearAction());
  createRequestButton.addActionListener(new CreateRequestsAction());
  addToTestCaseButton.addActionListener(new AddToTestCaseAction());
  addToMockServiceButton.addActionListener(new AddToMockServiceAction());
  mainToolbar.addGlue();
  infoLabel=new JLabel();
  infoLabel.setPreferredSize(new Dimension(150,20));
  infoLabel.setOpaque(false);
  mainToolbar.addFixed(infoLabel);
  progressBar=new JProgressBar();
  JPanel progressBarPanel=UISupport.createProgressBarPanel(progressBar,2,false);
  progressBarPanel.setPreferredSize(new Dimension(60,20));
  mainToolbar.addFixed(progressBarPanel);
  return toolbar;
}
