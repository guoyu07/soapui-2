{
  Settings settings=project.getSettings();
  server.setThreadPool(new SoapUIJettyThreadPool());
  Context context=new Context(server,ROOT,0);
  if (!StringUtils.isNullOrEmpty(sslEndpoint)) {
    if (sslEndpoint.startsWith(HTTPS)) {
      sslConnector=new SslSocketConnector();
      sslConnector.setKeystore(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_KEYSTORE,"JKS"));
      sslConnector.setPassword(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_PASSWORD,""));
      sslConnector.setKeyPassword(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_KEYPASSWORD,""));
      sslConnector.setTruststore(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_TRUSTSTORE,"JKS"));
      sslConnector.setTrustPassword(settings.getString(SoapMonitorAction.SecurityTabForm.SSLTUNNEL_TRUSTSTORE_PASSWORD,""));
      sslConnector.setNeedClientAuth(false);
      sslConnector.setMaxIdleTime(30000);
      sslConnector.setPort(localPort);
      server.addConnector(sslConnector);
      TunnelServlet tunnelServlet=new TunnelServlet(project,sslEndpoint,listenerCallBack);
      tunnelServlet.setIncludedContentTypes(includedContentTypes);
      context.addServlet(new ServletHolder(tunnelServlet),ROOT);
    }
 else {
      if (sslEndpoint.startsWith(HTTP)) {
        connector.setPort(localPort);
        server.addConnector(connector);
        TunnelServlet tunnelServlet=new TunnelServlet(project,sslEndpoint,listenerCallBack);
        tunnelServlet.setIncludedContentTypes(includedContentTypes);
        context.addServlet(new ServletHolder(tunnelServlet),ROOT);
      }
 else {
        UISupport.showErrorMessage("Unsupported/unknown protocol tunnel will not start");
        return;
      }
    }
    proxyOrTunnel=false;
  }
 else {
    proxyOrTunnel=true;
    connector.setPort(localPort);
    server.addConnector(connector);
    ProxyServlet proxyServlet=new ProxyServlet(project,listenerCallBack);
    proxyServlet.setIncludedContentTypes(includedContentTypes);
    context.addServlet(new ServletHolder(proxyServlet),ROOT);
  }
  try {
    server.start();
  }
 catch (  BindException e) {
    UISupport.showErrorMessage("Error starting " + getProxyOrTunnelString() + ": Could not open port "+ localPort+ ".\nTry a different port number.");
  }
catch (  Exception e) {
    UISupport.showErrorMessage("Error starting " + getProxyOrTunnelString() + ": "+ e.getMessage());
  }
}
