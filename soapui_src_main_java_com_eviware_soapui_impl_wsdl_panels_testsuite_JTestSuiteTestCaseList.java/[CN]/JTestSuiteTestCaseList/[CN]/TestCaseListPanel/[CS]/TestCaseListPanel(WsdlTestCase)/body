{
  super(new BorderLayout());
  setFocusable(true);
  this.testCase=testCase;
  autoscrollSupport=new AutoscrollSupport(this);
  progressBar=new JProgressBar(0,100){
    protected void processMouseEvent(    MouseEvent e){
      if (e.getID() == MouseEvent.MOUSE_PRESSED || e.getID() == MouseEvent.MOUSE_RELEASED) {
        TestCaseListPanel.this.processMouseEvent(translateMouseEvent(e));
      }
    }
    protected void processMouseMotionEvent(    MouseEvent e){
      TestCaseListPanel.this.processMouseMotionEvent(translateMouseEvent(e));
    }
    /** 
 * Translates the given mouse event to the enclosing map panel's
 * coordinate space.
 */
    private MouseEvent translateMouseEvent(    MouseEvent e){
      return new MouseEvent(TestCaseListPanel.this,e.getID(),e.getWhen(),e.getModifiers(),e.getX() + getX(),e.getY() + getY(),e.getClickCount(),e.isPopupTrigger(),e.getButton());
    }
  }
;
  JPanel progressPanel=UISupport.createProgressBarPanel(progressBar,5,false);
  progressBar.setMinimumSize(new Dimension(0,10));
  progressBar.setBackground(Color.WHITE);
  progressBar.setInheritsPopupMenu(true);
  label=new JLabel(testCase.getLabel());
  label.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  label.setInheritsPopupMenu(true);
  label.setEnabled(!testCase.isDisabled());
  add(progressPanel,BorderLayout.CENTER);
  add(label,BorderLayout.NORTH);
  testCasePropertyChangeListener=new TestCasePropertyChangeListener();
  initPopup(testCase);
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      requestFocus();
    }
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2) {
        if (selectedTestCase != null) {
          selectedTestCase.setSelected(false);
        }
        setSelected(true);
        selectedTestCase=TestCaseListPanel.this;
        return;
      }
      UISupport.selectAndShow(TestCaseListPanel.this.testCase);
    }
  }
);
  addKeyListener(new TestCaseListPanelKeyHandler());
  setSelected(false);
}
