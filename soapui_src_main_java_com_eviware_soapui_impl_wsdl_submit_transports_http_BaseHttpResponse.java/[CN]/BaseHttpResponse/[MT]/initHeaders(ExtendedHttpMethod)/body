{
  try {
    ByteArrayOutputStream rawResponse=new ByteArrayOutputStream();
    ByteArrayOutputStream rawRequest=new ByteArrayOutputStream();
    if (!httpMethod.isFailed() && httpMethod.hasHttpResponse()) {
      try {
        rawResponse.write(extractStatusLine(httpMethod).getBytes());
        rawResponse.write("\r\n".getBytes());
      }
 catch (      Exception ignore) {
      }
    }
    rawRequest.write((method + " " + String.valueOf(url)+ " "+ version+ "\r\n").getBytes());
    requestHeaders=new StringToStringsMap();
    Header[] headers=httpMethod.getAllHeaders();
    for (    Header header : headers) {
      requestHeaders.put(header.getName(),header.getValue());
      rawRequest.write(toExternalForm(header).getBytes());
    }
    responseHeaders=new StringToStringsMap();
    if (!httpMethod.isFailed() && httpMethod.hasHttpResponse()) {
      headers=httpMethod.getAllResponseHeaders();
      for (      Header header : headers) {
        responseHeaders.put(header.getName(),header.getValue());
        rawResponse.write(toExternalForm(header).getBytes());
      }
      responseHeaders.put("#status#",extractStatusLine(httpMethod));
    }
    if (httpMethod.getRequestEntity() != null) {
      rawRequest.write("\r\n".getBytes());
      if (httpMethod.getRequestEntity().isRepeatable()) {
        requestContentPos=rawRequest.size();
        MaxSizeByteArrayOutputStream tempOut=new MaxSizeByteArrayOutputStream(SoapUI.getSettings().getLong(UISettings.RAW_REQUEST_MESSAGE_SIZE,0));
        httpMethod.getRequestEntity().writeTo(tempOut);
        tempOut.writeTo(rawRequest);
      }
 else       rawRequest.write("<request data not available>".getBytes());
    }
    if (!httpMethod.isFailed() && httpMethod.hasHttpResponse() && httpMethod.getResponseBody() != null) {
      rawResponse.write("\r\n".getBytes());
      rawResponse.write(httpMethod.getResponseBody());
    }
    rawResponseData=rawResponse.toByteArray();
    rawRequestData=rawRequest.toByteArray();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
