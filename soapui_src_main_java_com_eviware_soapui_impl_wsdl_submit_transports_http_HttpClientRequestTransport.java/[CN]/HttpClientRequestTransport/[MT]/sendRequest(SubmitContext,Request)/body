{
  AbstractHttpRequestInterface<?> httpRequest=(AbstractHttpRequestInterface<?>)request;
  HttpClientSupport.SoapUIHttpClient httpClient=HttpClientSupport.getHttpClient();
  ExtendedHttpMethod httpMethod=createHttpMethod(httpRequest);
  boolean createdContext=false;
  HttpContext httpContext=(HttpContext)submitContext.getProperty(SubmitContext.HTTP_STATE_PROPERTY);
  if (httpContext == null) {
    httpContext=new BasicHttpContext();
    submitContext.setProperty(SubmitContext.HTTP_STATE_PROPERTY,httpContext);
    createdContext=true;
    CookieStore cookieStore=new BasicCookieStore();
    httpContext.setAttribute(ClientContext.COOKIE_STORE,cookieStore);
  }
  String localAddress=System.getProperty("soapui.bind.address",httpRequest.getBindAddress());
  if (localAddress == null || localAddress.trim().length() == 0)   localAddress=SoapUI.getSettings().getString(HttpSettings.BIND_ADDRESS,null);
  org.apache.http.HttpResponse httpResponse=null;
  if (localAddress != null && localAddress.trim().length() > 0) {
    try {
      httpMethod.getParams().setParameter(ConnRoutePNames.LOCAL_ADDRESS,InetAddress.getByName(localAddress));
    }
 catch (    Exception e) {
      SoapUI.logError(e,"Failed to set localAddress to [" + localAddress + "]");
    }
  }
  submitContext.removeProperty(RESPONSE);
  submitContext.setProperty(HTTP_METHOD,httpMethod);
  submitContext.setProperty(POST_METHOD,httpMethod);
  submitContext.setProperty(HTTP_CLIENT,httpClient);
  submitContext.setProperty(REQUEST_CONTENT,httpRequest.getRequestContent());
  submitContext.setProperty(WSDL_REQUEST,httpRequest);
  submitContext.setProperty(RESPONSE_PROPERTIES,new StringToStringMap());
  for (  RequestFilter filter : filters) {
    filter.filterRequest(submitContext,httpRequest);
  }
  try {
    Settings settings=httpRequest.getSettings();
    StringToStringsMap headers=httpRequest.getRequestHeaders();
    for (    String header : headers.keySet()) {
      httpMethod.removeHeaders(header);
    }
    for (    String header : headers.keySet()) {
      for (      String headerValue : headers.get(header)) {
        headerValue=PropertyExpander.expandProperties(submitContext,headerValue);
        httpMethod.addHeader(header,headerValue);
      }
    }
    WsdlProject project=(WsdlProject)ModelSupport.getModelItemProject(httpRequest);
    WssCrypto crypto=null;
    if (project != null && project.getWssContainer() != null) {
      crypto=project.getWssContainer().getCryptoByName(PropertyExpander.expandProperties(submitContext,httpRequest.getSslKeystore()));
    }
    if (crypto != null && WssCrypto.STATUS_OK.equals(crypto.getStatus())) {
      httpMethod.getParams().setParameter(SoapUIHttpRoute.SOAPUI_SSL_CONFIG,crypto.getSource() + " " + crypto.getPassword());
    }
    httpMethod.setDumpFile(PathUtils.expandPath(httpRequest.getDumpFile(),(AbstractWsdlModelItem<?>)httpRequest,submitContext));
    if (settings.getBoolean(HttpSettings.INCLUDE_REQUEST_IN_TIME_TAKEN))     httpMethod.initStartTime();
    if (httpMethod.getMetrics() != null) {
      httpMethod.getMetrics().setHttpMethod(httpMethod.getMethod());
      captureMetrics(httpMethod,httpClient);
      httpMethod.getMetrics().getTotalTimer().start();
    }
    httpResponse=HttpClientSupport.execute(httpMethod,httpContext);
    if (httpMethod.getMetrics() != null) {
      httpMethod.getMetrics().getReadTimer().stop();
      httpMethod.getMetrics().getTotalTimer().stop();
    }
    if (isRedirectResponse(httpResponse.getStatusLine().getStatusCode()) && httpRequest.isFollowRedirects()) {
      if (httpResponse.getEntity() != null) {
        EntityUtils.consume(httpResponse.getEntity());
      }
      ExtendedGetMethod returnMethod=followRedirects(httpClient,0,httpMethod,httpResponse,httpContext);
      httpMethod=returnMethod;
      submitContext.setProperty(HTTP_METHOD,httpMethod);
    }
  }
 catch (  Throwable t) {
    httpMethod.setFailed(t);
    if (t instanceof Exception)     throw (Exception)t;
    SoapUI.logError(t);
    throw new Exception(t);
  }
 finally {
    if (!httpMethod.isFailed()) {
      if (httpMethod.getMetrics() != null) {
        if (httpMethod.getMetrics().getReadTimer().getStop() == 0) {
          httpMethod.getMetrics().getReadTimer().stop();
        }
        if (httpMethod.getMetrics().getTotalTimer().getStop() == 0) {
          httpMethod.getMetrics().getTotalTimer().stop();
        }
      }
    }
 else {
      httpMethod.getMetrics().reset();
      httpMethod.getMetrics().setTimestamp(System.currentTimeMillis());
      captureMetrics(httpMethod,httpClient);
    }
    for (int c=filters.size() - 1; c >= 0; c--) {
      RequestFilter filter=filters.get(c);
      filter.afterRequest(submitContext,httpRequest);
    }
    if (!submitContext.hasProperty(RESPONSE)) {
      createDefaultResponse(submitContext,httpRequest,httpMethod);
    }
    Response response=(Response)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE);
    StringToStringMap responseProperties=(StringToStringMap)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE_PROPERTIES);
    for (    String key : responseProperties.keySet()) {
      response.setProperty(key,responseProperties.get(key));
    }
    if (createdContext) {
      submitContext.setProperty(SubmitContext.HTTP_STATE_PROPERTY,null);
    }
  }
  return (Response)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE);
}
