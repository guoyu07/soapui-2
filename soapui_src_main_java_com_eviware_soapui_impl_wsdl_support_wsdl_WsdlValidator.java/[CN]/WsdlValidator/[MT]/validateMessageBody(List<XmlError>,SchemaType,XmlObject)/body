{
  XmlOptions xmlOptions=new XmlOptions();
  xmlOptions.setLoadLineNumbers();
  xmlOptions.setLoadLineNumbers(XmlOptions.LOAD_LINE_NUMBERS_END_ELEMENT);
  XmlCursor cur=msg.newCursor();
  Map<String,String> map=new HashMap<String,String>();
  while (cur.hasNextToken()) {
    if (cur.toNextToken().isNamespace()) {
      map.put(cur.getName().getLocalPart(),cur.getTextValue());
    }
  }
  xmlOptions.setUseDefaultNamespace();
  xmlOptions.setSaveOuter();
  String xmlText=msg.copy().changeType(type).xmlText(xmlOptions);
  xmlOptions.setLoadAdditionalNamespaces(map);
  XmlObject obj=type.getTypeSystem().parse(xmlText,type,xmlOptions);
  obj=obj.changeType(type);
  ArrayList<Object> list=new ArrayList<Object>();
  xmlOptions=new XmlOptions();
  xmlOptions.setErrorListener(list);
  xmlOptions.setValidateTreatLaxAsSkip();
  try {
    obj.validate(xmlOptions);
  }
 catch (  Exception e) {
    SoapUI.logError(e);
    list.add("Internal Error - see error log for details - [" + e + "]");
  }
  for (int c=0; c < list.size(); c++) {
    XmlError error=(XmlError)list.get(c);
    if (error instanceof XmlValidationError) {
      XmlValidationError validationError=((XmlValidationError)error);
      if (wsdlContext.getSoapVersion().shouldIgnore(validationError)) {
        continue;
      }
      if (validationError.getErrorCode().equals("base64Binary") || validationError.getErrorCode().equals("hexBinary")) {
        XmlCursor cursor=validationError.getCursorLocation();
        if (cursor.toParent()) {
          String text=cursor.getTextValue();
          if (text.startsWith("cid:") || text.startsWith("file:")) {
            continue;
          }
        }
      }
    }
    int line=error.getLine() == -1 ? 0 : error.getLine() - 1;
    errors.add(XmlError.forLocation(error.getMessage(),error.getSourceName(),getLine(msg) + line,error.getColumn(),error.getOffset()));
  }
}
