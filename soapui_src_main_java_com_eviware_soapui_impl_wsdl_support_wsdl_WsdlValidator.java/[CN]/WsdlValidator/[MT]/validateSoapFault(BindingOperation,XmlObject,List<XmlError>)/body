{
  Map faults=bindingOperation.getBindingFaults();
  Iterator<BindingFault> i=faults.values().iterator();
  List<?> list=new ArrayList<Object>();
  XmlOptions xmlOptions=new XmlOptions();
  xmlOptions.setErrorListener(list);
  xmlOptions.setValidateTreatLaxAsSkip();
  msgXml.validate(xmlOptions);
  for (  Object o : list) {
    if (o instanceof XmlError)     errors.add((XmlError)o);
 else     errors.add(XmlError.forMessage(o.toString()));
  }
  while (i.hasNext()) {
    BindingFault bindingFault=i.next();
    String faultName=bindingFault.getName();
    Part[] faultParts=WsdlUtils.getFaultParts(bindingOperation,faultName);
    if (faultParts.length == 0) {
      log.warn("Missing fault parts in wsdl for fault [" + faultName + "] in bindingOperation ["+ bindingOperation.getName()+ "]");
      continue;
    }
    if (faultParts.length != 1) {
      log.info("Too many fault parts in wsdl for fault [" + faultName + "] in bindingOperation ["+ bindingOperation.getName()+ "]");
      continue;
    }
    Part part=faultParts[0];
    QName elementName=part.getElementName();
    if (elementName != null) {
      XmlObject[] paths=msgXml.selectPath("declare namespace env='" + wsdlContext.getSoapVersion().getEnvelopeNamespace() + "'; declare namespace flt='"+ wsdlContext.getSoapVersion().getFaultDetailNamespace()+ "';"+ "declare namespace ns='"+ elementName.getNamespaceURI()+ "';"+ "//env:Fault/flt:detail/ns:"+ elementName.getLocalPart());
      if (paths.length == 1) {
        SchemaGlobalElement elm=wsdlContext.getSchemaTypeLoader().findElement(elementName);
        if (elm != null) {
          validateMessageBody(errors,elm.getType(),paths[0]);
        }
 else         errors.add(XmlError.forMessage("Missing fault part element [" + elementName + "] for fault ["+ part.getName()+ "] in associated schema"));
        return;
      }
    }
 else     if (part.getTypeName() != null) {
      QName typeName=part.getTypeName();
      XmlObject[] paths=msgXml.selectPath("declare namespace env='" + wsdlContext.getSoapVersion().getEnvelopeNamespace() + "'; declare namespace flt='"+ wsdlContext.getSoapVersion().getFaultDetailNamespace()+ "';"+ "declare namespace ns='"+ typeName.getNamespaceURI()+ "';"+ "//env:Fault/flt:detail/ns:"+ part.getName());
      if (paths.length == 1) {
        SchemaType type=wsdlContext.getSchemaTypeLoader().findType(typeName);
        if (type != null) {
          validateMessageBody(errors,type,paths[0]);
        }
 else         errors.add(XmlError.forMessage("Missing fault part type [" + typeName + "] for fault ["+ part.getName()+ "] in associated schema"));
        return;
      }
    }
  }
  XmlObject[] paths=msgXml.selectPath("declare namespace env='" + wsdlContext.getSoapVersion().getEnvelopeNamespace() + "'; declare namespace flt='"+ wsdlContext.getSoapVersion().getFaultDetailNamespace()+ "';//env:Fault/flt:detail");
  if (paths.length == 0)   log.warn("Missing matching Fault in wsdl for bindingOperation [" + bindingOperation.getName() + "]");
 else {
    String xmlText=paths[0].xmlText(new XmlOptions().setSaveOuter());
    log.warn("Missing matching Fault in wsdl for Fault Detail element [" + XmlUtils.removeUnneccessaryNamespaces(xmlText) + "] in bindingOperation ["+ bindingOperation.getName()+ "]");
  }
}
