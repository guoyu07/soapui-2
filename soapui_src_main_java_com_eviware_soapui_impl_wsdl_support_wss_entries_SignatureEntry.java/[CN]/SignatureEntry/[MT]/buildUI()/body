{
  SimpleBindingForm form=new SimpleBindingForm(new PresentationModel<SignatureEntry>(this));
  form.addSpace(5);
  wssContainerListener=new InternalWssContainerListener();
  getWssContainer().addWssContainerListener(wssContainerListener);
  form.appendComboBox("crypto","Keystore",new KeystoresComboBoxModel(getWssContainer(),getWssContainer().getCryptoByName(crypto),true),"Selects the Keystore containing the key to use for signing").addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      keyAliasComboBoxModel.update(getWssContainer().getCryptoByName(crypto));
    }
  }
);
  keyAliasComboBoxModel=new KeyAliasComboBoxModel(getWssContainer().getCryptoByName(crypto));
  form.appendComboBox("username","Alias",keyAliasComboBoxModel,"The alias for the key to use for encryption");
  form.appendPasswordField("password","Password","The certificate password");
  JComboBox keyIdentifierTypeComboBox=form.appendComboBox("keyIdentifierType","Key Identifier Type",new Integer[]{0,1,3,4,12},"Sets which key identifier to use");
  keyIdentifierTypeComboBox.setRenderer(new KeyIdentifierTypeRenderer());
  keyIdentifierTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      initCustomTokenState();
    }
  }
);
  form.appendComboBox("signatureAlgorithm","Signature Algorithm",new String[]{DEFAULT_OPTION,WSConstants.RSA,WSConstants.DSA,XMLSignature.ALGO_ID_MAC_HMAC_SHA1,XMLSignature.ALGO_ID_MAC_HMAC_SHA256,XMLSignature.ALGO_ID_MAC_HMAC_SHA384,XMLSignature.ALGO_ID_MAC_HMAC_SHA512,XMLSignature.ALGO_ID_MAC_HMAC_RIPEMD160,XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5,XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA1,XMLSignature.ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA384,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA512,XMLSignature.ALGO_ID_SIGNATURE_RSA_RIPEMD160},"Set the name of the signature encryption algorithm to use");
  form.appendComboBox("signatureCanonicalization","Signature Canonicalization",new String[]{DEFAULT_OPTION,WSConstants.C14N_OMIT_COMMENTS,WSConstants.C14N_WITH_COMMENTS,WSConstants.C14N_EXCL_OMIT_COMMENTS,WSConstants.C14N_EXCL_WITH_COMMENTS},"Set the canonicalization method to use.");
  form.appendComboBox("digestAlgorithm","Digest Algorithm",new String[]{DEFAULT_OPTION,MessageDigestAlgorithm.ALGO_ID_DIGEST_NOT_RECOMMENDED_MD5,MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA1,MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA256,MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA384,MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA512,MessageDigestAlgorithm.ALGO_ID_DIGEST_RIPEMD160},"Set the digest algorithm to use");
  form.appendCheckBox("useSingleCert","Use Single Certificate","Use single certificate for signing");
  customTokenIdField=form.appendTextField("customTokenId","Custom Key Identifier","Use a custom key identifier for signing");
  customTokenValueTypeField=form.appendTextField("customTokenValueType","Custom Key Identifier ValueType","Specify the custom key identifier value type");
  initCustomTokenState();
  form.append("Parts",new WSPartsTable(parts,this));
  return new JScrollPane(form.getPanel());
}
