{
  if (targetCert == null) {
    throw new SecurityException("The certificate is not specified.");
  }
  try {
    if (jarFile == null) {
      throw new SecurityException("The plugin is not accessible.");
    }
  }
 catch (  Exception ex) {
    SecurityException se=new SecurityException();
    se.initCause(ex);
    throw se;
  }
  Vector<JarEntry> entriesVec=new Vector<JarEntry>();
  Manifest man=jarFile.getManifest();
  if (man == null) {
    throw new SecurityException("The provider is not signed");
  }
  byte[] buffer=new byte[8192];
  Enumeration entries=jarFile.entries();
  while (entries.hasMoreElements()) {
    JarEntry je=(JarEntry)entries.nextElement();
    if (je.isDirectory()) {
      continue;
    }
    entriesVec.addElement(je);
    InputStream is=jarFile.getInputStream(je);
    int n;
    while ((n=is.read(buffer,0,buffer.length)) != -1) {
    }
    is.close();
  }
  Enumeration e=entriesVec.elements();
  while (e.hasMoreElements()) {
    JarEntry je=(JarEntry)e.nextElement();
    Certificate[] certs=je.getCertificates();
    if ((certs == null) || (certs.length == 0)) {
      if (!je.getName().startsWith("META-INF")) {
        throw new SecurityException("The provider " + "has unsigned " + "class files.");
      }
    }
 else {
      int startIndex=0;
      X509Certificate[] certChain;
      boolean signedAsExpected=false;
      while ((certChain=getAChain(certs,startIndex)) != null) {
        if (certChain[0].equals(targetCert)) {
          signedAsExpected=true;
          break;
        }
        startIndex+=certChain.length;
      }
      if (!signedAsExpected) {
        throw new SecurityException("The provider " + "is not signed by a " + "trusted signer");
      }
    }
  }
}
