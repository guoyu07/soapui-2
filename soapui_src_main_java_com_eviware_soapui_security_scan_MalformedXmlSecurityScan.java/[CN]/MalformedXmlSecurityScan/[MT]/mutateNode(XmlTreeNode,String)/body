{
  ArrayList<String> result=new ArrayList<String>();
  String nodeXml=getXmlForNode(node);
  if (malformedXmlConfig.getInsertNewElement()) {
    StringBuffer buffer=new StringBuffer(nodeXml);
    if (nodeXml.endsWith("</" + node.getDomNode().getNodeName() + ">")) {
      buffer.insert(nodeXml.indexOf(">") + 1,malformedXmlConfig.getNewElementValue());
    }
 else {
      buffer.delete(nodeXml.lastIndexOf("/"),nodeXml.length());
      buffer.append(">" + malformedXmlConfig.getNewElementValue() + "</"+ node.getDomNode().getNodeName()+ ">");
    }
    result.add(buffer.toString());
  }
  if (malformedXmlConfig.getChangeTagName()) {
    String original=node.getNodeName();
    if (original.toUpperCase().equals(original)) {
      result.add(nodeXml.replaceAll(original,original.toLowerCase()));
    }
 else     if (original.toLowerCase().equals(original)) {
      result.add(nodeXml.replaceAll(original,original.toUpperCase()));
    }
 else {
      StringBuffer buffer=new StringBuffer();
      for (      char ch : original.toCharArray()) {
        if (Character.isUpperCase(ch)) {
          buffer.append(Character.toLowerCase(ch));
        }
 else {
          buffer.append(Character.toUpperCase(ch));
        }
      }
      result.add(nodeXml.replaceAll(original,buffer.toString()));
      buffer=new StringBuffer();
      for (      char ch : original.toCharArray()) {
        if (Character.isUpperCase(ch)) {
          buffer.append("_").append(Character.toLowerCase(ch));
        }
 else {
          buffer.append(ch);
        }
      }
      result.add(nodeXml.replaceAll(original,buffer.toString()));
    }
  }
  if (malformedXmlConfig.getLeaveTagOpen()) {
    if (nodeXml.endsWith("</" + node.getDomNode().getNodeName() + ">")) {
      StringBuffer buffer=new StringBuffer(nodeXml);
      buffer.delete(buffer.indexOf("</" + node.getDomNode().getNodeName() + ">"),buffer.length());
      result.add(buffer.toString());
      buffer=new StringBuffer(nodeXml);
      buffer.delete(0,buffer.indexOf(">") + 1);
      result.add(buffer.toString());
      buffer=new StringBuffer(nodeXml);
      buffer.delete(0,buffer.indexOf(">") + 1);
      buffer.delete(buffer.indexOf("</" + node.getDomNode().getNodeName() + ">") + 1,buffer.indexOf("</" + node.getDomNode().getNodeName() + ">") + 2);
      result.add(buffer.toString());
    }
 else {
      StringBuffer buffer=new StringBuffer(nodeXml);
      buffer.delete(nodeXml.lastIndexOf("/"),nodeXml.length());
      result.add(buffer.toString());
    }
  }
  if (malformedXmlConfig.getInsertInvalidCharacter()) {
    for (    char ch : new char[]{'<','>','&'}) {
      StringBuffer buffer=new StringBuffer(nodeXml);
      if (nodeXml.endsWith("</" + node.getDomNode().getNodeName() + ">")) {
        buffer.insert(buffer.indexOf("</" + node.getDomNode().getNodeName() + ">"),ch);
      }
 else {
        buffer.delete(nodeXml.lastIndexOf("/"),nodeXml.length());
        buffer.append('>').append(ch).append("</").append(node.getDomNode().getNodeName()).append(">");
      }
      result.add(buffer.toString());
    }
  }
  if (malformedAttributeConfig.getMutateAttributes()) {
    if (malformedAttributeConfig.getAddNewAttribute()) {
      if (malformedAttributeConfig.getNewAttributeName().trim().length() > 0) {
        StringBuffer buffer=new StringBuffer(nodeXml);
        buffer.insert(node.getNodeName().length() + 1," " + malformedAttributeConfig.getNewAttributeName() + "="+ "\""+ malformedAttributeConfig.getNewAttributeValue()+ "\" ");
        result.add(buffer.toString());
      }
    }
    if (malformedAttributeConfig.getInsertInvalidChars()) {
      if (node.getDomNode().hasAttributes()) {
        for (        char ch : new char[]{'"','\'','<','>','&'}) {
          StringBuffer buffer=new StringBuffer(nodeXml);
          buffer.insert(buffer.indexOf("=") + 3,ch);
          result.add(buffer.toString());
        }
      }
    }
    if (malformedAttributeConfig.getLeaveAttributeOpen()) {
      if (node.getDomNode().hasAttributes()) {
        StringBuffer buffer=new StringBuffer(nodeXml);
        buffer.delete(buffer.indexOf("=") + 1,buffer.indexOf("=") + 2);
        result.add(buffer.toString());
      }
    }
  }
  return result;
}
