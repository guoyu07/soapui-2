{
switch (popupStrategy) {
case INTERNAL_BROWSER_NEW_WINDOW:
    webView.getEngine().setCreatePopupHandler(new Callback<PopupFeatures,WebEngine>(){
      @Override public WebEngine call(      PopupFeatures pf){
        BrowserWindow popupWindow=new BrowserWindow(pf);
        browserWindows.add(popupWindow);
        popupWindow.setSize(800,600);
        popupWindow.setVisible(true);
        return popupWindow.browser.getWebEngine();
      }
    }
);
  break;
case EXTERNAL_BROWSER:
webView.getEngine().setCreatePopupHandler(new Callback<PopupFeatures,WebEngine>(){
  @Override public WebEngine call(  PopupFeatures pf){
    final WebEngine webEngine=new WebEngine();
    webEngine.locationProperty().addListener(new ChangeListener<String>(){
      @Override public void changed(      ObservableValue<? extends String> observableValue,      String oldValue,      String newValue){
        observableValue.removeListener(this);
        Platform.runLater(new Runnable(){
          @Override public void run(){
            webEngine.loadContent("");
          }
        }
);
        Tools.openURL(newValue);
      }
    }
);
    return webEngine;
  }
}
);
break;
case DISABLED:
webView.getEngine().setCreatePopupHandler(new Callback<PopupFeatures,WebEngine>(){
@Override public WebEngine call(PopupFeatures pf){
return null;
}
}
);
break;
case INTERNAL_BROWSER_REUSE_WINDOW:
default :
break;
}
}
