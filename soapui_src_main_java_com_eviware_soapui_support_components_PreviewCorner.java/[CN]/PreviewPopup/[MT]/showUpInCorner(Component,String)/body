{
  if (_viewPort.getComponentCount() == 0) {
    return;
  }
  float scaleFactor=1.1f;
  _ratio=(((float)_viewPort.getComponent(0).getHeight() / ((float)_viewPort.getHeight()) / scaleFactor));
  if (_ratio < 2) {
    _ratio=2;
  }
  int zoomWindowImageWidth=(int)(_viewPort.getComponent(0).getWidth() / _ratio);
  if (zoomWindowImageWidth < 10) {
    UISupport.showInfoMessage("Viewport too large for readable image, use scrollbar instead");
    return;
  }
  int zoomWindowImageHeight=(int)(_viewPort.getComponent(0).getHeight() / _ratio);
  Image capture=captureComponentViewAsBufferedImage(_viewPort.getComponent(0));
  Image componentImage=new BufferedImage(zoomWindowImageWidth,zoomWindowImageHeight,BufferedImage.TYPE_INT_RGB);
  Graphics2D g2d=(Graphics2D)componentImage.getGraphics();
  if (zoomWindowImageWidth > 15) {
    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  }
  g2d.drawImage(capture,0,0,zoomWindowImageWidth,zoomWindowImageHeight,null);
  g2d.dispose();
  ImageIcon componentIcon=new ImageIcon(componentImage);
  _iconWidth=componentIcon.getIconWidth();
  _iconHeight=componentIcon.getIconHeight();
  _zoomWindow.setIcon(componentIcon);
  _zoomWindow.setBounds(0,0,_iconWidth,_iconHeight);
  int cursorWidth=(int)(_viewPort.getWidth() / _ratio);
  int cursorHeight=(int)(_viewPort.getHeight() / _ratio);
  _cursorLabel.setBounds(0,0,cursorWidth,cursorHeight);
  _layeredPane.setPreferredSize(new Dimension(_iconWidth,_iconHeight));
  int dx=componentIcon.getIconWidth() + DELTA;
  int dy=componentIcon.getIconHeight() + DELTA;
  if (corner.equals(JScrollPane.UPPER_LEFT_CORNER)) {
    ;
  }
 else   if (corner.equals(JScrollPane.UPPER_RIGHT_CORNER)) {
    dx=-dx;
  }
 else   if (corner.equals(JScrollPane.LOWER_RIGHT_CORNER)) {
    dx=-dx;
    dy=-dy;
  }
 else   if (corner.equals(JScrollPane.LOWER_LEFT_CORNER)) {
    dy=-dy;
  }
  if (dy < 0 && Math.abs(dy) > _viewPort.getHeight()) {
    dy=-_viewPort.getHeight() - 10;
  }
  this.show(c,dx,dy);
}
