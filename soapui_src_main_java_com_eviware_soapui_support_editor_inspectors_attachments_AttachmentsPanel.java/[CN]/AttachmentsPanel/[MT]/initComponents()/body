{
  jScrollPane1=new javax.swing.JScrollPane();
  tableModel=new AttachmentsTableModel(container);
  fileTable=JTableFactory.getInstance().makeJTable(tableModel);
  if (container instanceof MutableAttachmentContainer) {
    attachmentPartCellEditor=new AttachmentPartCellEditor();
    fileTable.getColumnModel().getColumn(3).setCellEditor(attachmentPartCellEditor);
  }
  setLayout(new java.awt.BorderLayout());
  jScrollPane1.setViewportView(fileTable);
  add(jScrollPane1,java.awt.BorderLayout.CENTER);
  jPanel1=UISupport.createSmallToolbar();
  if (container instanceof MutableAttachmentContainer) {
    addFileBtn=UISupport.createToolbarButton(UISupport.createImageIcon("/add_property.gif"));
    removeBtn=UISupport.createToolbarButton(UISupport.createImageIcon("/remove_property.gif"));
    reloadBtn=UISupport.createToolbarButton(UISupport.createImageIcon("/reload_properties.gif"));
    addFileBtn.setToolTipText("Adds an attachment");
    addFileBtn.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        addFileBtnActionPerformed(evt);
      }
    }
);
    jPanel1.addFixed(addFileBtn);
    removeBtn.setToolTipText("Removes the selected attachment");
    removeBtn.setEnabled(false);
    removeBtn.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        removeBtnActionPerformed(evt);
      }
    }
);
    jPanel1.addFixed(removeBtn);
    reloadBtn.setToolTipText("Reloads the selected attachment");
    reloadBtn.setEnabled(false);
    reloadBtn.addActionListener(new java.awt.event.ActionListener(){
      public void actionPerformed(      java.awt.event.ActionEvent evt){
        reloadBtnActionPerformed(evt);
      }
    }
);
    jPanel1.addFixed(reloadBtn);
  }
  exportBtn=UISupport.createToolbarButton(UISupport.createImageIcon("/export.gif"));
  exportBtn.setToolTipText("Exports the selected attachment to a file");
  exportBtn.setEnabled(false);
  exportBtn.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exportBtnActionPerformed(evt);
    }
  }
);
  jPanel1.addFixed(exportBtn);
  jPanel1.addGlue();
  jPanel1.addFixed(UISupport.createToolbarButton(new ShowOnlineHelpAction(HelpUrls.ATTACHMENTS_HELP_URL)));
  add(jPanel1,java.awt.BorderLayout.NORTH);
  fileTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (removeBtn != null) {
        removeBtn.setEnabled(fileTable.getSelectedRowCount() > 0);
        reloadBtn.setEnabled(fileTable.getSelectedRowCount() > 0);
      }
      exportBtn.setEnabled(fileTable.getSelectedRowCount() > 0);
    }
  }
);
  fileTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2) {
        return;
      }
      int ix=fileTable.getSelectedRow();
      if (ix == -1) {
        return;
      }
      Attachment attachment=container.getAttachmentAt(ix);
      if (attachment.isCached()) {
        String name=attachment.getName();
        try {
          name=StringUtils.createFileName(name,'-');
          File tempFile=File.createTempFile("attachment-" + name,"." + ContentTypeHandler.getExtensionForContentType(attachment.getContentType()));
          exportAttachment(tempFile,attachment,false);
        }
 catch (        Exception e1) {
          UISupport.showErrorMessage(e1);
        }
      }
 else {
        Tools.openURL(attachment.getUrl());
      }
    }
  }
);
}
