{
  editArea=new RSyntaxTextArea(20,60);
  editArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
  editArea.setFont(UISupport.getEditorFont());
  editArea.setCodeFoldingEnabled(true);
  editArea.setAntiAliasingEnabled(true);
  editArea.setMinimumSize(new Dimension(50,50));
  editArea.setCaretPosition(0);
  editArea.setEnabled(!readOnly);
  editArea.setEditable(!readOnly);
  editArea.setBorder(BorderFactory.createMatteBorder(0,2,0,0,Color.WHITE));
  errorListModel=new DefaultListModel();
  JList list=new JList(errorListModel);
  list.addMouseListener(new ValidationListMouseAdapter(list,editArea));
  errorScrollPane=new JScrollPane(list);
  errorScrollPane.setVisible(false);
  splitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT){
    public void requestFocus(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          editArea.requestFocusInWindow();
        }
      }
);
    }
    public boolean hasFocus(){
      return editArea.hasFocus();
    }
  }
;
  splitter.setUI(new SoapUISplitPaneUI());
  splitter.setDividerSize(0);
  splitter.setOneTouchExpandable(true);
  editArea.getDocument().addDocumentListener(new DocumentListenerAdapter(){
    public void update(    Document document){
      if (!updating && getDocument() != null) {
        updating=true;
        getDocument().setXml(editArea.getText());
        updating=false;
      }
    }
  }
);
  JPanel p=new JPanel(new BorderLayout());
  editorScrollPane=new RTextScrollPane(editArea);
  JTextComponentPopupMenu.add(editArea);
  buildPopup(editArea.getPopupMenu(),editArea);
  if (UISupport.isMac()) {
    editArea.getInputMap().put(KeyStroke.getKeyStroke("shift meta V"),validateXmlAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("meta S"),saveXmlTextAreaAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("control L"),enableLineNumbersAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("control meta L"),goToLineAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("meta F"),findAndReplaceDialog);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("shift meta F"),formatXmlAction);
    if (!readOnly) {
      editArea.getInputMap().put(KeyStroke.getKeyStroke("meta L"),loadXmlTextAreaAction);
    }
  }
 else {
    editArea.getInputMap().put(KeyStroke.getKeyStroke("alt V"),validateXmlAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("ctrl S"),saveXmlTextAreaAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("alt L"),enableLineNumbersAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("control alt L"),goToLineAction);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("ctrl F"),findAndReplaceDialog);
    editArea.getInputMap().put(KeyStroke.getKeyStroke("alt F"),formatXmlAction);
    if (!readOnly) {
      editArea.getInputMap().put(KeyStroke.getKeyStroke("ctrl L"),loadXmlTextAreaAction);
    }
  }
  editorScrollPane.setLineNumbersEnabled(SoapUI.getSettings().getBoolean(UISettings.SHOW_XML_LINE_NUMBERS));
  editorScrollPane.setFoldIndicatorEnabled(true);
  p.add(editorScrollPane,BorderLayout.CENTER);
  splitter.setTopComponent(editorScrollPane);
  splitter.setBottomComponent(errorScrollPane);
  splitter.setDividerLocation(1.0);
  splitter.setBorder(null);
  previewCorner=UISupport.addPreviewCorner(getEditorScrollPane(),true);
  if (!readOnly) {
    PropertyExpansionPopupListener.enable(editArea,modelItem);
  }
}
