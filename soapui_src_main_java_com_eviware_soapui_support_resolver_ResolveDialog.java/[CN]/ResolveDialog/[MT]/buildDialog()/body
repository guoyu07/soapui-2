{
  dialog=new SimpleDialog(title,description,helpUrl,true){
    @Override protected Component buildContent(){
      JPanel panel=new JPanel(new BorderLayout());
      table=new JXTable(resolveContextTableModel);
      table.setHorizontalScrollEnabled(true);
      table.setDefaultRenderer(JComboBox.class,new ResolverRenderer());
      table.setDefaultEditor(JComboBox.class,new ResolverEditor());
      table.getColumn(2).setCellRenderer(new PathCellRenderer());
      table.getColumn(3).setWidth(100);
      table.addMouseListener(new MouseAdapter(){
        @Override public void mouseClicked(        MouseEvent e){
          if (e.getClickCount() > 1) {
            int ix=table.getSelectedRow();
            if (ix != -1) {
              ResolveContext.PathToResolve pathToResolve=resolveContextTableModel.getContext().getPathsToResolve().get(ix);
              if (pathToResolve != null)               UISupport.selectAndShow(pathToResolve.getOwner());
            }
          }
        }
      }
);
      panel.add(new JScrollPane(table),BorderLayout.CENTER);
      panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
      return panel;
    }
    @Override protected void modifyButtons(){
      super.modifyButtons();
      Component[] components=buttons.getComponents();
      for (      Component component : components) {
        if (component instanceof JButton) {
          JButton button=(JButton)component;
          if (button.getText().equals("Cancel")) {
            button.setText("Update");
          }
        }
      }
    }
    @Override protected boolean handleCancel(){
      return handleUpdate();
    }
    @SuppressWarnings("unchecked") private boolean handleUpdate(){
      for (      PathToResolve otherPath : resolveContextTableModel.getContext().getPathsToResolve()) {
        if (!otherPath.isResolved()) {
          otherPath.getOwner().afterLoad();
          otherPath.getOwner().resolve(resolveContextTableModel.getContext());
        }
      }
      dialog=null;
      setVisible(false);
      resolve(resolveContextTableModel.getContext().getModelItem());
      return true;
    }
    @SuppressWarnings("unchecked") @Override protected boolean handleOk(){
      for (      PathToResolve path : resolveContextTableModel.getContext().getPathsToResolve()) {
        if (!path.isResolved()) {
          if (UISupport.confirm("There are unresolved paths, continue?","Unresolved paths - Warning")) {
            return true;
          }
          return false;
        }
      }
      return true;
    }
  }
;
  dialog.setSize(550,300);
  dialog.setModal(false);
  dialog.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  dialog.addWindowListener(new WindowAdapter(){
    @SuppressWarnings("unchecked") @Override public void windowClosing(    WindowEvent arg0){
      for (      PathToResolve path : resolveContextTableModel.getContext().getPathsToResolve()) {
        if (!path.isResolved()) {
          if (UISupport.confirm("There are unresolved paths, continue?","Unresolved paths - Warning")) {
            dialog.setVisible(false);
          }
          break;
        }
      }
    }
  }
);
}
