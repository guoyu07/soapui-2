{
  if (!dig) {
    super.addSelectionPaths(paths);
    return;
  }
  for (int i=0; i < paths.length; i++) {
    TreePath path=paths[i];
    TreePath[] selectionPaths=getSelectionPaths();
    if (selectionPaths == null)     break;
    ArrayList toBeRemoved=new ArrayList();
    for (int j=0; j < selectionPaths.length; j++) {
      if (isDescendant(selectionPaths[j],path))       toBeRemoved.add(selectionPaths[j]);
    }
    super.removeSelectionPaths((TreePath[])toBeRemoved.toArray(new TreePath[0]));
  }
  for (int i=0; i < paths.length; i++) {
    TreePath path=paths[i];
    TreePath temp=null;
    while (areSiblingsSelected(path)) {
      temp=path;
      if (path.getParentPath() == null)       break;
      path=path.getParentPath();
    }
    if (temp != null) {
      if (temp.getParentPath() != null)       addSelectionPath(temp.getParentPath());
 else {
        if (!isSelectionEmpty())         removeSelectionPaths(getSelectionPaths());
        super.addSelectionPaths(new TreePath[]{temp});
      }
    }
 else     super.addSelectionPaths(new TreePath[]{path});
  }
}
