{
  if (project.getMockServiceCount() == 0) {
    UISupport.showErrorMessage("Project does not have any MockServices to deploy");
    return;
  }
  if (dialog == null) {
    dialog=ADialogBuilder.buildDialog(MockAsWarDialog.class);
    dialog.getFormField(MockAsWarDialog.GLOBAL_SETTINGS).addFormFieldListener(new XFormFieldListener(){
      public void valueChanged(      XFormField sourceField,      String newValue,      String oldValue){
        if (Boolean.valueOf(newValue))         dialog.getFormField(MockAsWarDialog.SETTINGS_FILE).setEnabled(true);
 else         dialog.getFormField(MockAsWarDialog.SETTINGS_FILE).setEnabled(false);
      }
    }
);
    dialog.getFormField(MockAsWarDialog.WAR_DIRECTORY).addFormFieldValidator(new RequiredValidator("WAR Directory is required"));
  }
  XFormField settingFile=dialog.getFormField(MockAsWarDialog.SETTINGS_FILE);
  settingFile.setValue(((DefaultSoapUICore)SoapUI.getSoapUICore()).getSettingsFile());
  settingFile.setEnabled(false);
  XFormField warDirectory=dialog.getFormField(MockAsWarDialog.WAR_DIRECTORY);
  XFormField warFile=dialog.getFormField(MockAsWarDialog.WAR_FILE);
  if (dialog.show()) {
    project.beforeSave();
    try {
      project.save();
    }
 catch (    IOException e) {
      log.error(e.getMessage(),e);
    }
    MockAsWar mockAsWar=new MockAsWar(project.getPath(),settingFile.getValue(),warDirectory.getValue(),warFile.getValue(),dialog.getBooleanValue(MockAsWarDialog.EXT_LIBS),dialog.getBooleanValue(MockAsWarDialog.ACTIONS),dialog.getBooleanValue(MockAsWarDialog.LISTENERS));
    mockAsWar.createMockAsWarArchive();
  }
}
