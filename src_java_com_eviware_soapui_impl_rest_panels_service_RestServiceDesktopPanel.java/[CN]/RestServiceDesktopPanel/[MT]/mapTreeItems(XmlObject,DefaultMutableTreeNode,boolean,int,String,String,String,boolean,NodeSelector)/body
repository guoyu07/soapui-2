{
  List<DefaultMutableTreeNode> resultNodes=new ArrayList<DefaultMutableTreeNode>();
  try {
    XmlObject[] items=xmlObject.selectPath(query);
    List<DefaultMutableTreeNode> treeNodes=new ArrayList<DefaultMutableTreeNode>();
    DefaultMutableTreeNode root=treeRoot;
    if (groupName != null) {
      String groupKey=new TreePath(root.getPath()).toString() + "/" + groupName;
      root=groupNodes.get(groupKey);
      if (root == null && (items.length > 0 || createEmpty)) {
        root=new DefaultMutableTreeNode(groupName);
        treeRoot.add(root);
        groupNodes.put(groupKey,root);
      }
 else       if (root != null) {
        Enumeration<?> children=root.children();
        while (children.hasMoreElements())         treeNodes.add((DefaultMutableTreeNode)children.nextElement());
      }
    }
    if (items.length == 0)     return resultNodes;
    for (    XmlObject item : items) {
      XmlObject[] selectPath=item.selectPath(nameQuery);
      if (selectPath.length > 0) {
        DefaultMutableTreeNode treeNode=new DefaultMutableTreeNode(new InspectItem(item,selectPath[0],tabIndex,selector));
        treeNodes.add(treeNode);
        resultNodes.add(treeNode);
      }
    }
    if (sort) {
      Collections.sort(treeNodes,new Comparator<DefaultMutableTreeNode>(){
        public int compare(        DefaultMutableTreeNode o1,        DefaultMutableTreeNode o2){
          return o1.toString().compareTo(o2.toString());
        }
      }
);
    }
    root.removeAllChildren();
    for (    DefaultMutableTreeNode treeNode : treeNodes) {
      root.add(treeNode);
      String path="/" + getTreeNodeName(treeNode);
      TreePath treePath=new TreePath(treeNode.getPath());
      while (treeNode.getParent() != null) {
        treeNode=(DefaultMutableTreeNode)treeNode.getParent();
        path="/" + getTreeNodeName(treeNode) + path;
      }
      pathMap.put(path,treePath);
    }
  }
 catch (  Throwable e) {
    SoapUI.log("Failed to map items for query [" + query + "]:["+ nameQuery+ "]");
    SoapUI.logError(e);
  }
  return resultNodes;
}
