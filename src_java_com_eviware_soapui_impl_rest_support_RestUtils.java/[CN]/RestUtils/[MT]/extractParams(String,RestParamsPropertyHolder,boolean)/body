{
  if (StringUtils.isNullOrEmpty(pathOrEndpoint))   return "";
  String path=pathOrEndpoint;
  String queryString="";
  URL url=null;
  try {
    url=new URL(pathOrEndpoint);
    path=url.getPath();
    queryString=url.getQuery();
  }
 catch (  MalformedURLException e) {
    int ix=path.indexOf('?');
    if (ix >= 0) {
      queryString=path.substring(ix + 1);
      path=path.substring(0,ix);
    }
  }
  String[] items=path.split("/");
  int templateParamCount=0;
  StringBuffer resultPath=new StringBuffer();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    try {
      if (item.startsWith("{") && item.endsWith("}")) {
        String name=item.substring(1,item.length() - 1);
        RestParamProperty property=params.getProperty(name);
        if (!params.hasProperty(name)) {
          property=params.addProperty(name);
        }
        property.setStyle(ParameterStyle.TEMPLATE);
        property.setValue(name);
        property.setDefaultValue(name);
      }
 else {
        String[] matrixParams=item.split(";");
        if (matrixParams.length > 0) {
          item=matrixParams[0];
          for (int c=1; c < matrixParams.length; c++) {
            String matrixParam=matrixParams[c];
            int ix=matrixParam.indexOf('=');
            if (ix == -1) {
              String name=URLDecoder.decode(matrixParam,"Utf-8");
              if (!params.hasProperty(name))               params.addProperty(name).setStyle(ParameterStyle.MATRIX);
            }
 else {
              String name=URLDecoder.decode(matrixParam.substring(0,ix),"Utf-8");
              RestParamProperty property=params.getProperty(name);
              if (property == null) {
                property=params.addProperty(name);
              }
              property.setStyle(ParameterStyle.MATRIX);
              property.setValue(URLDecoder.decode(matrixParam.substring(ix + 1),"Utf-8"));
              property.setDefaultValue(URLDecoder.decode(matrixParam.substring(ix + 1),"Utf-8"));
            }
          }
        }
        Integer.parseInt(item);
        String name="param" + templateParamCount++;
        RestParamProperty property=params.getProperty(name);
        if (!params.hasProperty(name)) {
          property=params.addProperty(name);
        }
        property.setStyle(ParameterStyle.TEMPLATE);
        property.setValue(item);
        property.setDefaultValue(item);
        item="{" + property.getName() + "}";
      }
    }
 catch (    Exception e) {
    }
    if (StringUtils.hasContent(item))     resultPath.append('/').append(item);
  }
  if (StringUtils.hasContent(queryString)) {
    items=queryString.split("&");
    for (    String item : items) {
      try {
        int ix=item.indexOf('=');
        if (ix == -1) {
          String name=URLDecoder.decode(item,"Utf-8");
          if (!params.hasProperty(name)) {
            params.addProperty(name).setStyle(ParameterStyle.QUERY);
          }
        }
 else {
          String name=URLDecoder.decode(item.substring(0,ix),"Utf-8");
          RestParamProperty property=params.getProperty(name);
          if (property == null) {
            property=params.addProperty(name);
          }
          property.setStyle(ParameterStyle.QUERY);
          property.setValue(URLDecoder.decode(item.substring(ix + 1),"Utf-8"));
          property.setDefaultValue(URLDecoder.decode(item.substring(ix + 1),"Utf-8"));
        }
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
  }
  if (path.endsWith("/"))   resultPath.append('/');
  if (keepHost && url != null) {
    return Tools.getEndpointFromUrl(url) + resultPath.toString();
  }
  return resultPath.toString();
}
