{
  if (modelItem == null)   return null;
  XFormDialogBuilder builder=XFormFactory.createDialogBuilder("Launch TestRunner");
  mainForm=builder.createForm("Basic");
  mainForm.addComboBox(TESTSUITE,new String[]{},"The TestSuite to run").addFormFieldListener(new XFormFieldListener(){
    public void valueChanged(    XFormField sourceField,    String newValue,    String oldValue){
      List<String> testCases=new ArrayList<String>();
      String tc=mainForm.getComponentValue(TESTCASE);
      if (newValue.equals(ALL_VALUE)) {
        for (        TestSuite testSuite : testSuites) {
          for (          TestCase testCase : testSuite.getTestCaseList()) {
            if (!testCases.contains(testCase.getName()))             testCases.add(testCase.getName());
          }
        }
      }
 else {
        TestSuite testSuite=getModelItem().getTestSuiteByName(newValue);
        if (testSuite != null)         testCases.addAll(Arrays.asList(ModelSupport.getNames(testSuite.getTestCaseList())));
      }
      testCases.add(0,ALL_VALUE);
      mainForm.setOptions(TESTCASE,testCases.toArray());
      if (testCases.contains(tc)) {
        mainForm.getFormField(TESTCASE).setValue(tc);
      }
    }
  }
);
  mainForm.addComboBox(TESTCASE,new String[]{},"The TestCase to run");
  mainForm.addSeparator();
  mainForm.addCheckBox(PRINTREPORT,"Prints a summary report to the console");
  mainForm.addCheckBox(EXPORTJUNITRESULTS,"Exports results to a JUnit-Style report");
  mainForm.addCheckBox(EXPORTALL,"Exports all results (not only errors)");
  mainForm.addTextField(ROOTFOLDER,"Folder to export to",XForm.FieldType.FOLDER);
  mainForm.addCheckBox(COVERAGE,"Generate WSDL Coverage report (soapUI Pro only)");
  mainForm.addCheckBox(OPEN_REPORT,"Open generated HTML report in browser (soapUI Pro only)");
  mainForm.addSeparator();
  mainForm.addCheckBox(ENABLEUI,"Enables UI components in scripts");
  mainForm.addTextField(TESTRUNNERPATH,"Folder containing TestRunner.bat to use",XForm.FieldType.FOLDER);
  mainForm.addCheckBox(SAVEPROJECT,"Saves project before running").setEnabled(!modelItem.isRemote());
  mainForm.addCheckBox(ADDSETTINGS,"Adds global settings to command-line");
  advForm=builder.createForm("Overrides");
  advForm.addComboBox(ENDPOINT,new String[]{""},"endpoint to forward to");
  advForm.addTextField(HOSTPORT,"Host:Port to use for requests",XForm.FieldType.TEXT);
  advForm.addSeparator();
  advForm.addTextField(USERNAME,"The username to set for all requests",XForm.FieldType.TEXT);
  advForm.addTextField(PASSWORD,"The password to set for all requests",XForm.FieldType.PASSWORD);
  advForm.addTextField(DOMAIN,"The domain to set for all requests",XForm.FieldType.TEXT);
  advForm.addComboBox(WSSTYPE,new String[]{"","Text","Digest"},"The username to set for all requests");
  setToolsSettingsAction(null);
  buildArgsForm(builder,false,"TestRunner");
  return builder.buildDialog(buildDefaultActions(HelpUrls.TESTRUNNER_HELP_URL,modelItem),"Specify arguments for launching soapUI TestRunner",UISupport.TOOL_ICON);
}
