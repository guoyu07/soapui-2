{
  if (configPanel == null) {
    ButtonBarBuilder builder=new ButtonBarBuilder();
    infoLabel=new JLabel();
    delayField=new JTextField(4);
    UISupport.setPreferredHeight(delayField,18);
    delayField.setHorizontalAlignment(JTextField.RIGHT);
    delayField.setText(String.valueOf(burstDelay / 1000));
    delayField.setToolTipText("Sets the delay before each burst run in seconds");
    delayField.getDocument().addDocumentListener(new DocumentListenerAdapter(){
      public void update(      Document doc){
        try {
          burstDelay=Integer.parseInt(delayField.getText()) * 1000;
          notifyConfigurationChanged();
        }
 catch (        NumberFormatException e) {
        }
      }
    }
);
    builder.addFixed(new JLabel("Burst Delay"));
    builder.addRelatedGap();
    builder.addFixed(delayField);
    builder.addRelatedGap();
    durationField=new JTextField(4);
    UISupport.setPreferredHeight(durationField,18);
    durationField.setHorizontalAlignment(JTextField.RIGHT);
    durationField.setText(String.valueOf(burstDuration / 1000));
    durationField.setToolTipText("Specifies the duration of a burst run in seconds");
    durationField.getDocument().addDocumentListener(new DocumentListenerAdapter(){
      public void update(      Document doc){
        try {
          burstDuration=Integer.parseInt(durationField.getText()) * 1000;
          notifyConfigurationChanged();
        }
 catch (        NumberFormatException e) {
        }
      }
    }
);
    builder.addFixed(new JLabel("Burst Duration"));
    builder.addRelatedGap();
    builder.addFixed(durationField);
    builder.addRelatedGap();
    builder.addFixed(infoLabel);
    configPanel=builder.getPanel();
  }
  return configPanel;
}
