{
  if (configPanel == null) {
    ButtonBarBuilder builder=new ButtonBarBuilder();
    intervalField=new JTextField(4);
    UISupport.setPreferredHeight(intervalField,18);
    intervalField.setHorizontalAlignment(JTextField.RIGHT);
    intervalField.setText(String.valueOf(interval / 1000));
    intervalField.setToolTipText("Sets the interval between variances in seconds");
    intervalField.getDocument().addDocumentListener(new DocumentListenerAdapter(){
      public void update(      Document doc){
        try {
          interval=Long.parseLong(intervalField.getText()) * 1000;
          notifyConfigurationChanged();
        }
 catch (        NumberFormatException e) {
        }
      }
    }
);
    builder.addFixed(new JLabel("Interval"));
    builder.addRelatedGap();
    builder.addFixed(intervalField);
    builder.addRelatedGap();
    varianceField=new JTextField(3);
    UISupport.setPreferredHeight(varianceField,18);
    varianceField.setHorizontalAlignment(JTextField.RIGHT);
    varianceField.setText(String.valueOf(variance));
    varianceField.setToolTipText("Specifies the relative magnitude of a variance");
    varianceField.getDocument().addDocumentListener(new DocumentListenerAdapter(){
      public void update(      Document doc){
        try {
          variance=Float.parseFloat(varianceField.getText());
          notifyConfigurationChanged();
        }
 catch (        NumberFormatException e) {
        }
      }
    }
);
    builder.addFixed(new JLabel("Variance"));
    builder.addRelatedGap();
    builder.addFixed(varianceField);
    builder.addRelatedGap();
    infoLabel=new JLabel();
    builder.addFixed(infoLabel);
    configPanel=builder.getPanel();
    stateDependantComponents.add(intervalField);
    stateDependantComponents.add(varianceField);
  }
  return configPanel;
}
