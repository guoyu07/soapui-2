{
  Settings settings=soapMonitor.getProject().getSettings();
  BoundedThreadPool threadPool=new BoundedThreadPool();
  threadPool.setMaxThreads(100);
  server.setThreadPool(threadPool);
  Context context=new Context(server,ROOT,0);
  if (sslEndpoint != null) {
    if (sslEndpoint.startsWith(HTTPS)) {
      sslConnector=new SslSocketConnector();
      sslConnector.setKeystore(settings.getString(SoapMonitorAction.LaunchForm.SSLTUNNEL_KEYSTORE,"JKS"));
      sslConnector.setPassword(settings.getString(SoapMonitorAction.LaunchForm.SSLTUNNEL_PASSWORD,""));
      sslConnector.setKeyPassword(settings.getString(SoapMonitorAction.LaunchForm.SSLTUNNEL_KEYPASSWORD,""));
      sslConnector.setTruststore(settings.getString(SoapMonitorAction.LaunchForm.SSLTUNNEL_TRUSTSTORE,"JKS"));
      sslConnector.setTrustPassword(settings.getString(SoapMonitorAction.LaunchForm.SSLTUNNEL_TRUSTSTORE_PASSWORD,""));
      sslConnector.setNeedClientAuth(false);
      sslConnector.setMaxIdleTime(30000);
      sslConnector.setPort(localPort);
      server.addConnector(sslConnector);
      context.addServlet(new ServletHolder(new TunnelServlet(soapMonitor,sslEndpoint)),ROOT);
    }
 else {
      if (sslEndpoint.startsWith(HTTP)) {
        connector.setPort(localPort);
        server.addConnector(connector);
        context.addServlet(new ServletHolder(new TunnelServlet(soapMonitor,sslEndpoint)),ROOT);
      }
 else {
        UISupport.showErrorMessage("Unsupported/unknown protocol tunnel will not start");
        return;
      }
    }
    proxyOrTunnel=false;
  }
 else {
    proxyOrTunnel=true;
    connector.setPort(localPort);
    server.addConnector(connector);
    context.addServlet(new ServletHolder(new ProxyServlet(soapMonitor)),ROOT);
  }
  try {
    server.start();
  }
 catch (  Exception e) {
    UISupport.showErrorMessage("Error starting monitor: " + e.getMessage());
  }
}
