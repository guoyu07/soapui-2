{
  monitor.fireOnRequest(request,response);
  if (response.isCommitted())   return;
  ExtendedHttpMethod method;
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  if (httpRequest.getMethod().equals("GET"))   method=new ExtendedGetMethod();
 else   if (httpRequest.getMethod().equals("POST"))   method=new ExtendedPostMethod();
 else   if (httpRequest.getMethod().equals("PUT"))   method=new ExtendedPutMethod();
 else   if (httpRequest.getMethod().equals("HEAD"))   method=new ExtendedHeadMethod();
 else   if (httpRequest.getMethod().equals("OPTIONS"))   method=new ExtendedOptionsMethod();
 else   if (httpRequest.getMethod().equals("TRACE"))   method=new ExtendedTraceMethod();
 else   if (httpRequest.getMethod().equals("PATCH"))   method=new ExtendedPatchMethod();
 else   method=new ExtendedGetMethod();
  method.setDecompress(false);
  ByteArrayOutputStream requestBody=null;
  if (method instanceof HttpEntityEnclosingRequest) {
    requestBody=Tools.readAll(request.getInputStream(),0);
    ByteArrayEntity entity=new ByteArrayEntity(requestBody.toByteArray());
    entity.setContentType(request.getContentType());
    ((HttpEntityEnclosingRequest)method).setEntity(entity);
  }
  JProxyServletWsdlMonitorMessageExchange capturedData=new JProxyServletWsdlMonitorMessageExchange(project);
  capturedData.setRequestHost(httpRequest.getServerName());
  capturedData.setRequestMethod(httpRequest.getMethod());
  capturedData.setRequestHeader(httpRequest);
  capturedData.setHttpRequestParameters(httpRequest);
  capturedData.setTargetURL(httpRequest.getRequestURL().toString());
  String connectionHeader=httpRequest.getHeader("Connection");
  if (connectionHeader != null) {
    connectionHeader=connectionHeader.toLowerCase();
    if (connectionHeader.indexOf("keep-alive") < 0 && connectionHeader.indexOf("close") < 0)     connectionHeader=null;
  }
  boolean xForwardedFor=false;
  @SuppressWarnings("unused") Enumeration<?> headerNames=httpRequest.getHeaderNames();
  while (headerNames.hasMoreElements()) {
    String hdr=(String)headerNames.nextElement();
    String lhdr=hdr.toLowerCase();
    if (dontProxyHeaders.contains(lhdr))     continue;
    if (connectionHeader != null && connectionHeader.indexOf(lhdr) >= 0)     continue;
    Enumeration<?> vals=httpRequest.getHeaders(hdr);
    while (vals.hasMoreElements()) {
      String val=(String)vals.nextElement();
      if (val != null) {
        method.setHeader(lhdr,val);
        xForwardedFor|="X-Forwarded-For".equalsIgnoreCase(hdr);
      }
    }
  }
  method.setHeader("Via","SoapUI Monitor");
  if (!xForwardedFor)   method.addHeader("X-Forwarded-For",request.getRemoteAddr());
  StringBuffer url=new StringBuffer("http://");
  url.append(httpRequest.getServerName());
  if (httpRequest.getServerPort() != 80)   url.append(":" + httpRequest.getServerPort());
  if (httpRequest.getServletPath() != null) {
    url.append(httpRequest.getServletPath());
    try {
      method.setURI(new java.net.URI(url.toString()));
    }
 catch (    URISyntaxException e) {
      SoapUI.logError(e);
    }
    if (httpRequest.getQueryString() != null) {
      url.append("?" + httpRequest.getQueryString());
      try {
        method.setURI(new java.net.URI(url.toString()));
      }
 catch (      URISyntaxException e) {
        SoapUI.logError(e);
      }
    }
  }
  method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,false);
  monitor.fireBeforeProxy(request,response,method);
  if (settings.getBoolean(LaunchForm.SSLTUNNEL_REUSESTATE)) {
    if (httpState == null)     httpState=new BasicHttpContext();
    HttpClientSupport.execute(method,httpState);
  }
 else {
    HttpClientSupport.execute(method);
  }
  capturedData.stopCapture();
  capturedData.setRequest(requestBody == null ? null : requestBody.toByteArray());
  capturedData.setRawResponseBody(method.getResponseBody());
  capturedData.setResponseHeader(method.getHttpResponse());
  capturedData.setRawRequestData(getRequestToBytes(request.toString(),method,requestBody));
  capturedData.setRawResponseData(getResponseToBytes(method,capturedData.getRawResponseBody()));
  capturedData.setResponseContent(new String(method.getDecompressedResponseBody()));
  capturedData.setResponseStatusCode(method.hasHttpResponse() ? method.getHttpResponse().getStatusLine().getStatusCode() : null);
  capturedData.setResponseStatusLine(method.hasHttpResponse() ? method.getHttpResponse().getStatusLine().toString() : null);
  monitor.fireAfterProxy(request,response,method,capturedData);
  ((HttpServletResponse)response).setStatus(method.hasHttpResponse() ? method.getHttpResponse().getStatusLine().getStatusCode() : null);
  if (!response.isCommitted()) {
    StringToStringsMap responseHeaders=capturedData.getResponseHeaders();
    HttpServletResponse httpServletResponse=(HttpServletResponse)response;
    for (    String name : responseHeaders.keySet()) {
      for (      String header : responseHeaders.get(name))       httpServletResponse.addHeader(name,header);
    }
    IO.copy(new ByteArrayInputStream(capturedData.getRawResponseBody()),httpServletResponse.getOutputStream());
  }
synchronized (this) {
    if (checkContentType(method)) {
      monitor.addMessageExchange(capturedData);
    }
  }
}
