{
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  InetSocketAddress inetAddress=new InetSocketAddress(sslEndPoint,sslPort);
  ExtendedPostMethod postMethod=new ExtendedPostMethod();
  if (capturedData == null) {
    capturedData=new JProxyServletWsdlMonitorMessageExchange(project);
    capturedData.setRequestHost(httpRequest.getRemoteHost());
    capturedData.setRequestHeader(httpRequest);
    capturedData.setTargetURL(this.prot + inetAddress.getHostName());
  }
  CaptureInputStream capture=new CaptureInputStream(httpRequest.getInputStream());
  Enumeration<?> headerNames=httpRequest.getHeaderNames();
  while (headerNames.hasMoreElements()) {
    String hdr=(String)headerNames.nextElement();
    String lhdr=hdr.toLowerCase();
    if ("host".equals(lhdr)) {
      Enumeration<?> vals=httpRequest.getHeaders(hdr);
      while (vals.hasMoreElements()) {
        String val=(String)vals.nextElement();
        if (val.startsWith("127.0.0.1")) {
          postMethod.addRequestHeader(hdr,sslEndPoint);
        }
      }
      continue;
    }
    Enumeration<?> vals=httpRequest.getHeaders(hdr);
    while (vals.hasMoreElements()) {
      String val=(String)vals.nextElement();
      if (val != null) {
        postMethod.addRequestHeader(hdr,val);
      }
    }
  }
  postMethod.setRequestEntity(new InputStreamRequestEntity(capture,"text/xml; charset=utf-8"));
  HostConfiguration hostConfiguration=new HostConfiguration();
  httpRequest.getProtocol();
  hostConfiguration.getParams().setParameter(SoapUIHostConfiguration.SOAPUI_SSL_CONFIG,settings.getString(LaunchForm.SSLTUNNEL_KEYSTOREPATH,"") + " " + settings.getString(LaunchForm.SSLTUNNEL_KEYSTOREPASSWORD,""));
  hostConfiguration.setHost(new URI(this.prot + sslEndPoint,true));
  postMethod.setPath(sslEndPoint.substring(sslEndPoint.indexOf("/"),sslEndPoint.length()));
  if (settings.getBoolean(LaunchForm.SSLTUNNEL_REUSESTATE)) {
    if (httpState == null)     httpState=new HttpState();
    client.executeMethod(hostConfiguration,postMethod,httpState);
  }
 else {
    client.executeMethod(hostConfiguration,postMethod);
  }
  capturedData.stopCapture();
  byte[] res=postMethod.getResponseBody();
  capturedData.setRequest(capture.getCapturedData());
  capturedData.setResponse(res);
  capturedData.setResponseHeader(postMethod);
  capturedData.setRawRequestData(getRequestToBytes(postMethod,capture));
  capturedData.setRawResponseData(getResponseToBytes(postMethod,res));
  monitor.addMessageExchange(capturedData);
  StringToStringMap responseHeaders=capturedData.getResponseHeaders();
  capturedData=null;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  for (  String name : responseHeaders.keySet()) {
    String header=responseHeaders.get(name);
    httpResponse.addHeader(name,header);
  }
  IO.copy(new ByteArrayInputStream(res),httpResponse.getOutputStream());
  postMethod.releaseConnection();
}
