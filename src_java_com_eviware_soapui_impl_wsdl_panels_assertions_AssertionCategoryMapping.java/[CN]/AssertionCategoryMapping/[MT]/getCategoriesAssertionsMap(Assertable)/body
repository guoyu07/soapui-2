{
  LinkedHashMap<String,LinkedHashSet<String>> categoriesAssertionsMap=new LinkedHashMap<String,LinkedHashSet<String>>();
  String[] assertions=TestAssertionRegistry.getInstance().getAvailableAssertionNames(assertable);
  LinkedHashSet<String> validatingResponseAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(XPathContainsAssertion.LABEL)) {
      validatingResponseAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(XQueryContainsAssertion.LABEL)) {
      validatingResponseAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(SimpleContainsAssertion.LABEL)) {
      validatingResponseAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(SimpleNotContainsAssertion.LABEL)) {
      validatingResponseAssertionsSet.add(availableAssertion);
    }
  }
  if (validatingResponseAssertionsSet.size() > 0)   categoriesAssertionsMap.put(VALIDATE_RESPONSE_CONTENT_CATEGORY,validatingResponseAssertionsSet);
  LinkedHashSet<String> statusAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(InvalidHttpStatusCodesAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(WSSStatusAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(NotSoapFaultAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(ValidHttpStatusCodesAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(SoapResponseAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(WSAResponseAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(SchemaComplianceAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(SoapFaultAssertion.LABEL)) {
      statusAssertionsSet.add(availableAssertion);
    }
  }
  if (statusAssertionsSet.size() > 0)   categoriesAssertionsMap.put(STATUS_CATEGORY,statusAssertionsSet);
  LinkedHashSet<String> scriptAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(GroovyScriptAssertion.LABEL)) {
      scriptAssertionsSet.add(availableAssertion);
    }
  }
  if (scriptAssertionsSet.size() > 0)   categoriesAssertionsMap.put(SCRIPT_CATEGORY,scriptAssertionsSet);
  LinkedHashSet<String> slaAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(ResponseSLAAssertion.LABEL)) {
      slaAssertionsSet.add(availableAssertion);
    }
  }
  if (slaAssertionsSet.size() > 0)   categoriesAssertionsMap.put(SLA_CATEGORY,slaAssertionsSet);
  LinkedHashSet<String> jmsAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(JMSStatusAssertion.LABEL)) {
      jmsAssertionsSet.add(availableAssertion);
    }
    if (availableAssertion.equals(JMSTimeoutAssertion.LABEL)) {
      jmsAssertionsSet.add(availableAssertion);
    }
  }
  if (jmsAssertionsSet.size() > 0)   categoriesAssertionsMap.put(JMS_CATEGORY,jmsAssertionsSet);
  LinkedHashSet<String> securityAssertionsSet=new LinkedHashSet<String>();
  for (  String availableAssertion : assertions) {
    if (availableAssertion.equals(SensitiveInfoExposureAssertion.LABEL)) {
      securityAssertionsSet.add(availableAssertion);
    }
  }
  if (securityAssertionsSet.size() > 0)   categoriesAssertionsMap.put(SECURITY_CATEGORY,securityAssertionsSet);
  return categoriesAssertionsMap;
}
