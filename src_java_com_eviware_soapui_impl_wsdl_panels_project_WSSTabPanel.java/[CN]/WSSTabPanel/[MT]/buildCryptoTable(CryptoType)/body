{
  final JTable cryptoTable=new JTable(new CryptoTableModel(cryptoType));
switch (cryptoType) {
case KEYSTORE:
    keystoreTable=cryptoTable;
  break;
case TRUSTSTORE:
truststoreTable=cryptoTable;
break;
default :
throw new IllegalArgumentException(ILLEGAL_CRYPTO_TYPE_MESSAGE);
}
JPanel panel=new JPanel(new BorderLayout());
JPanel p=new JPanel(new BorderLayout());
p.add(buildCryptoToolbar(cryptoType),BorderLayout.NORTH);
cryptoTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
switch (cryptoType) {
case KEYSTORE:
removeKeystoreAction.setEnabled(cryptoTable.getSelectedRow() != -1);
break;
case TRUSTSTORE:
removeTruststoreAction.setEnabled(cryptoTable.getSelectedRow() != -1);
break;
default :
throw new IllegalArgumentException(ILLEGAL_CRYPTO_TYPE_MESSAGE);
}
}
}
);
cryptoTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JPasswordField()));
cryptoTable.getColumnModel().getColumn(2).setCellRenderer(new PasswordTableCellRenderer());
cryptoTable.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(new JPasswordField()));
cryptoTable.getColumnModel().getColumn(4).setCellRenderer(new PasswordTableCellRenderer());
p.add(new JScrollPane(cryptoTable),BorderLayout.CENTER);
panel.add(p,BorderLayout.CENTER);
return panel;
}
