{
  JSplitPane splitPane=UISupport.createHorizontalSplit();
  listModel=new DefaultListModel();
  for (int c=0; c < transferStep.getTransferCount(); c++) {
    String name=transferStep.getTransferAt(c).getName();
    if (transferStep.getTransferAt(c).isDisabled())     name+=" (disabled)";
    listModel.addElement(name);
  }
  transferList=new JList(listModel);
  transferList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  transferList.addListSelectionListener(new TransferListSelectionListener());
  componentEnabler.add(transferList);
  JScrollPane listScrollPane=new JScrollPane(transferList);
  UISupport.addTitledBorder(listScrollPane,"Transfers");
  JPanel p=new JPanel(new BorderLayout());
  p.add(listScrollPane,BorderLayout.CENTER);
  p.add(createPropertiesToolbar(),BorderLayout.NORTH);
  splitPane.setLeftComponent(p);
  JSplitPane innerSplit=UISupport.createVerticalSplit();
  innerSplit.setBorder(null);
  sourceArea=new JUndoableTextArea();
  sourceArea.setToolTipText("XPath selection from source property");
  sourceArea.setEnabled(false);
  sourceArea.getDocument().addDocumentListener(new SourceAreaDocumentListener());
  componentEnabler.add(sourceArea);
  targetArea=new JUndoableTextArea();
  targetArea.setToolTipText("XPath target in target property");
  targetArea.setEnabled(false);
  targetArea.getDocument().addDocumentListener(new TargetAreaDocumentListener());
  componentEnabler.add(targetArea);
  JPanel sourcePanel=new JPanel(new BorderLayout());
  sourcePanel.add(new JScrollPane(sourceArea),BorderLayout.CENTER);
  JXToolBar toolbar=createSourceToolbar();
  sourcePanel.add(toolbar,BorderLayout.NORTH);
  sourcePanel.setBorder(BorderFactory.createEmptyBorder(0,3,3,3));
  innerSplit.setTopComponent(sourcePanel);
  JPanel targetPanel=new JPanel(new BorderLayout());
  targetPanel.add(new JScrollPane(targetArea),BorderLayout.CENTER);
  toolbar=createTargetToolbar();
  targetPanel.add(toolbar,BorderLayout.NORTH);
  targetPanel.setBorder(BorderFactory.createEmptyBorder(0,3,3,3));
  innerSplit.setBottomComponent(targetPanel);
  innerSplit.setResizeWeight(0.5);
  innerSplit.setDividerLocation(0.5);
  JPanel panel=createTransferOptions();
  JPanel innerPanel=new JPanel(new BorderLayout());
  innerPanel.add(innerSplit,BorderLayout.CENTER);
  innerPanel.add(panel,BorderLayout.SOUTH);
  innerPanel.add(createConfigToolbar(),BorderLayout.NORTH);
  splitPane.setRightComponent(innerPanel);
  splitPane.setResizeWeight(0.1);
  splitPane.setDividerLocation(120);
  inspectorPanel=JInspectorPanelFactory.build(splitPane);
  logInspector=new JComponentInspector<JComponent>(buildLog(),"Transfer Log (0)","A log of performed transfers while the editor was open",true);
  inspectorPanel.addInspector(logInspector);
  add(inspectorPanel.getComponent(),BorderLayout.CENTER);
  setBorder(BorderFactory.createEmptyBorder(3,3,3,3));
  setPreferredSize(new Dimension(550,400));
  if (listModel.getSize() > 0)   transferList.setSelectedIndex(0);
 else   setSelectedTransfer(null);
  componentEnabler.add(deleteButton);
  componentEnabler.add(declareButton);
  componentEnabler.add(runButton);
  componentEnabler.add(runAllButton);
  componentEnabler.add(copyButton);
  componentEnabler.add(renameButton);
  componentEnabler.add(failTransferCheckBox);
  componentEnabler.add(setNullCheckBox);
  componentEnabler.add(transferTextContentCheckBox);
  componentEnabler.add(ignoreEmptyCheckBox);
  componentEnabler.add(transferAllCheckBox);
  componentEnabler.add(useXQueryCheckBox);
  componentEnabler.add(entitizeCheckBox);
  componentEnabler.add(transferChildNodesCheckBox);
}
