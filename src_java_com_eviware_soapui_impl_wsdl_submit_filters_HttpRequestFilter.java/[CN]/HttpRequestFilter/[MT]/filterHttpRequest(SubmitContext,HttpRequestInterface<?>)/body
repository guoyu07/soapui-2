{
  HttpMethod httpMethod=(HttpMethod)context.getProperty(BaseHttpRequestTransport.HTTP_METHOD);
  String path=PropertyExpander.expandProperties(context,request.getPath());
  StringBuffer query=new StringBuffer();
  StringToStringMap responseProperties=(StringToStringMap)context.getProperty(BaseHttpRequestTransport.RESPONSE_PROPERTIES);
  MimeMultipart formMp="multipart/form-data".equals(request.getMediaType()) && httpMethod instanceof EntityEnclosingMethod ? new MimeMultipart() : null;
  RestParamsPropertyHolder params=request.getParams();
  for (int c=0; c < params.getPropertyCount(); c++) {
    RestParamProperty param=params.getPropertyAt(c);
    String value=PropertyExpander.expandProperties(context,param.getValue());
    responseProperties.put(param.getName(),value);
    List<String> valueParts=sendEmptyParameters(request) ? RestUtils.splitMultipleParametersEmptyIncluded(value,request.getMultiValueDelimiter()) : RestUtils.splitMultipleParameters(value,request.getMultiValueDelimiter());
    if (value != null && param.getStyle() != ParameterStyle.HEADER && param.getStyle() != ParameterStyle.TEMPLATE && !param.isDisableUrlEncoding()) {
      try {
        String encoding=System.getProperty("soapui.request.encoding",request.getEncoding());
        if (StringUtils.hasContent(encoding)) {
          value=URLEncoder.encode(value,encoding);
          for (int i=0; i < valueParts.size(); i++)           valueParts.set(i,URLEncoder.encode(valueParts.get(i),encoding));
        }
 else {
          value=URLEncoder.encode(value);
          for (int i=0; i < valueParts.size(); i++)           valueParts.set(i,URLEncoder.encode(valueParts.get(i)));
        }
      }
 catch (      UnsupportedEncodingException e1) {
        SoapUI.logError(e1);
        value=URLEncoder.encode(value);
        for (int i=0; i < valueParts.size(); i++)         valueParts.set(i,URLEncoder.encode(valueParts.get(i)));
      }
      value=value.replaceAll("\\+","%20");
      for (int i=0; i < valueParts.size(); i++)       valueParts.set(i,valueParts.get(i).replaceAll("\\+","%20"));
    }
    if (!sendEmptyParameters(request)) {
      if (!StringUtils.hasContent(value) && !param.getRequired())       continue;
    }
switch (param.getStyle()) {
case HEADER:
      for (      String valuePart : valueParts)       httpMethod.addRequestHeader(param.getName(),valuePart);
    break;
case QUERY:
  if (formMp == null || !request.isPostQueryString()) {
    for (    String valuePart : valueParts) {
      if (query.length() > 0)       query.append('&');
      query.append(URLEncoder.encode(param.getName()));
      query.append('=');
      if (StringUtils.hasContent(valuePart))       query.append(valuePart);
    }
  }
 else {
    try {
      addFormMultipart(request,formMp,param.getName(),responseProperties.get(param.getName()));
    }
 catch (    MessagingException e) {
      e.printStackTrace();
    }
  }
break;
case TEMPLATE:
path=path.replaceAll("\\{" + param.getName() + "\\}",value == null ? "" : value);
break;
case MATRIX:
if (param.getType().equals(XmlBoolean.type.getName())) {
if (value.toUpperCase().equals("TRUE") || value.equals("1")) {
path+=";" + param.getName();
}
}
 else {
path+=";" + param.getName();
if (StringUtils.hasContent(value)) {
path+="=" + value;
}
}
case PLAIN:
break;
}
}
if (request.getSettings().getBoolean(HttpSettings.FORWARD_SLASHES)) path=PathUtils.fixForwardSlashesInPath(path);
if (PathUtils.isHttpPath(path)) {
try {
URI uri=new URI(path,false);
context.setProperty(BaseHttpRequestTransport.REQUEST_URI,uri);
httpMethod.setURI(uri);
}
 catch (Exception e) {
e.printStackTrace();
}
}
 else if (StringUtils.hasContent(path)) {
try {
URI uri=new URI(path,false);
httpMethod.setPath(uri.toString());
}
 catch (Exception e) {
e.printStackTrace();
httpMethod.setPath(path);
}
}
if (query.length() > 0 && !request.isPostQueryString()) {
httpMethod.setQueryString(query.toString());
}
if (request instanceof RestRequest) {
String acceptEncoding=((RestRequest)request).getAccept();
if (StringUtils.hasContent(acceptEncoding)) {
httpMethod.setRequestHeader("Accept",acceptEncoding);
}
}
String encoding=System.getProperty("soapui.request.encoding",StringUtils.unquote(request.getEncoding()));
if (formMp != null) {
try {
if (request.hasRequestBody() && httpMethod instanceof EntityEnclosingMethod) {
String requestContent=PropertyExpander.expandProperties(context,request.getRequestContent(),request.isEntitizeProperties());
if (StringUtils.hasContent(requestContent)) {
initRootPart(request,requestContent,formMp);
}
}
for (Attachment attachment : request.getAttachments()) {
MimeBodyPart part=new PreencodedMimeBodyPart("binary");
if (attachment instanceof FileAttachment<?>) {
String name=attachment.getName();
if (StringUtils.hasContent(attachment.getContentID()) && !name.equals(attachment.getContentID())) name=attachment.getContentID();
part.setDisposition("form-data; name=\"" + name + "\"; filename=\""+ attachment.getName()+ "\"");
}
 else part.setDisposition("form-data; name=\"" + attachment.getName() + "\"");
part.setDataHandler(new DataHandler(new AttachmentDataSource(attachment)));
formMp.addBodyPart(part);
}
MimeMessage message=new MimeMessage(AttachmentUtils.JAVAMAIL_SESSION);
message.setContent(formMp);
message.saveChanges();
RestRequestMimeMessageRequestEntity mimeMessageRequestEntity=new RestRequestMimeMessageRequestEntity(message,request);
((EntityEnclosingMethod)httpMethod).setRequestEntity(mimeMessageRequestEntity);
httpMethod.setRequestHeader("Content-Type",mimeMessageRequestEntity.getContentType());
httpMethod.setRequestHeader("MIME-Version","1.0");
}
 catch (Throwable e) {
SoapUI.logError(e);
}
}
 else if (request.hasRequestBody() && httpMethod instanceof EntityEnclosingMethod) {
if (StringUtils.hasContent(request.getMediaType())) httpMethod.setRequestHeader("Content-Type",getContentTypeHeader(request.getMediaType(),encoding));
if (request.isPostQueryString()) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new StringRequestEntity(query.toString()));
}
 else {
String requestContent=PropertyExpander.expandProperties(context,request.getRequestContent(),request.isEntitizeProperties());
List<Attachment> attachments=new ArrayList<Attachment>();
for (Attachment attachment : request.getAttachments()) {
if (attachment.getContentType().equals(request.getMediaType())) {
attachments.add(attachment);
}
}
if (StringUtils.hasContent(requestContent) && attachments.isEmpty()) {
try {
byte[] content=encoding == null ? requestContent.getBytes() : requestContent.getBytes(encoding);
((EntityEnclosingMethod)httpMethod).setRequestEntity(new ByteArrayRequestEntity(content));
}
 catch (UnsupportedEncodingException e) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new ByteArrayRequestEntity(requestContent.getBytes()));
}
}
 else if (attachments.size() > 0) {
try {
MimeMultipart mp=null;
if (StringUtils.hasContent(requestContent)) {
mp=new MimeMultipart();
initRootPart(request,requestContent,mp);
}
 else if (attachments.size() == 1) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new InputStreamRequestEntity(attachments.get(0).getInputStream()));
httpMethod.setRequestHeader("Content-Type",getContentTypeHeader(request.getMediaType(),encoding));
}
if (((EntityEnclosingMethod)httpMethod).getRequestEntity() == null) {
if (mp == null) mp=new MimeMultipart();
AttachmentUtils.addMimeParts(request,attachments,mp,new StringToStringMap());
MimeMessage message=new MimeMessage(AttachmentUtils.JAVAMAIL_SESSION);
message.setContent(mp);
message.saveChanges();
RestRequestMimeMessageRequestEntity mimeMessageRequestEntity=new RestRequestMimeMessageRequestEntity(message,request);
((EntityEnclosingMethod)httpMethod).setRequestEntity(mimeMessageRequestEntity);
httpMethod.setRequestHeader("Content-Type",getContentTypeHeader(mimeMessageRequestEntity.getContentType(),encoding));
httpMethod.setRequestHeader("MIME-Version","1.0");
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
