{
  HttpMethod httpMethod=(HttpMethod)context.getProperty(BaseHttpRequestTransport.HTTP_METHOD);
  String path=request.getPath();
  StringBuffer query=new StringBuffer();
  StringToStringMap responseProperties=(StringToStringMap)context.getProperty(BaseHttpRequestTransport.RESPONSE_PROPERTIES);
  XmlBeansRestParamsTestPropertyHolder params=request.getParams();
  for (int c=0; c < params.getPropertyCount(); c++) {
    RestParamProperty param=params.getPropertyAt(c);
    String value=PropertyExpansionUtils.expandProperties(context,param.getValue());
    if (value != null && !param.isDisableUrlEncoding())     value=URLEncoder.encode(value);
    responseProperties.put(param.getName(),value);
    if (!StringUtils.hasContent(value) && !param.getRequired())     continue;
switch (param.getStyle()) {
case HEADER:
      httpMethod.setRequestHeader(param.getName(),value);
    break;
case QUERY:
  if (query.length() > 0)   query.append('&');
query.append(URLEncoder.encode(param.getName()));
if (StringUtils.hasContent(value)) query.append('=').append(value);
break;
case TEMPLATE:
path=path.replaceAll("\\{" + param.getName() + "\\}",value);
break;
case MATRIX:
if (param.getType().equals(XmlBoolean.type.getName())) {
if (value.toUpperCase().equals("TRUE") || value.equals("1")) {
path+=";" + param.getName();
}
}
 else {
path+=";" + param.getName();
if (StringUtils.hasContent(value)) {
path+="=" + value;
}
}
case PLAIN:
break;
}
}
if (PathUtils.isHttpPath(path)) {
try {
httpMethod.setURI(new URI(path));
}
 catch (Exception e) {
e.printStackTrace();
}
}
 else {
httpMethod.setPath(path);
}
if (query.length() > 0 && !request.isPostQueryString()) {
httpMethod.setQueryString(query.toString());
}
String acceptEncoding=request.getAccept();
if (StringUtils.hasContent(acceptEncoding)) {
httpMethod.setRequestHeader("Accept",acceptEncoding);
}
String encoding=StringUtils.unquote(request.getEncoding());
if (request.hasRequestBody() && httpMethod instanceof EntityEnclosingMethod) {
httpMethod.setRequestHeader("Content-Type",request.getMediaType());
if (request.isPostQueryString()) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new StringRequestEntity(query.toString()));
}
 else {
String requestContent=request.getRequestContent();
List<Attachment> attachments=new ArrayList<Attachment>();
for (Attachment attachment : request.getAttachments()) {
if (attachment.getContentType().equals(request.getMediaType())) {
attachments.add(attachment);
}
}
if (StringUtils.hasContent(requestContent) && attachments.isEmpty()) {
try {
byte[] content=encoding == null ? requestContent.getBytes() : requestContent.getBytes(encoding);
((EntityEnclosingMethod)httpMethod).setRequestEntity(new ByteArrayRequestEntity(content));
}
 catch (UnsupportedEncodingException e) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new ByteArrayRequestEntity(requestContent.getBytes()));
}
}
 else if (attachments.size() > 0) {
try {
MimeMultipart mp=null;
if (StringUtils.hasContent(requestContent)) {
mp=new MimeMultipart();
initRootPart(request,requestContent,mp);
}
 else if (attachments.size() == 1) {
((EntityEnclosingMethod)httpMethod).setRequestEntity(new InputStreamRequestEntity(attachments.get(0).getInputStream()));
httpMethod.setRequestHeader("Content-Type",request.getMediaType());
}
if (((EntityEnclosingMethod)httpMethod).getRequestEntity() == null) {
if (mp == null) mp=new MimeMultipart();
AttachmentUtils.addMimeParts(request,attachments,mp,new StringToStringMap());
MimeMessage message=new MimeMessage(AttachmentUtils.JAVAMAIL_SESSION);
message.setContent(mp);
message.saveChanges();
RestRequestMimeMessageRequestEntity mimeMessageRequestEntity=new RestRequestMimeMessageRequestEntity(message,request);
((EntityEnclosingMethod)httpMethod).setRequestEntity(mimeMessageRequestEntity);
httpMethod.setRequestHeader("Content-Type",mimeMessageRequestEntity.getContentType());
httpMethod.setRequestHeader("MIME-Version","1.0");
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
}
}
