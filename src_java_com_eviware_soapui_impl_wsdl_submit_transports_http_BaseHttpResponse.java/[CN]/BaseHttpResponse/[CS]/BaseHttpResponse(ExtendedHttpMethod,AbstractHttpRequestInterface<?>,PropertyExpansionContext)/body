{
  this.httpRequest=new WeakReference<AbstractHttpRequestInterface<?>>(httpRequest);
  this.timeTaken=httpMethod.getTimeTaken();
  HttpMetrics httpMetrics=(HttpMetrics)httpMethod.getParams().getParameter(ExtendedHttpMethod.HTTP_METRICS);
  httpMetrics.getTotalTimer().stop();
  method=httpMethod.getMethod();
  version=httpMethod.getProtocolVersion().toString();
  try {
    this.url=httpMethod.getURI().toURL();
  }
 catch (  Exception e1) {
    SoapUI.logError(e1);
  }
  if (!httpMethod.isFailed()) {
    Settings settings=httpRequest.getSettings();
    if (settings.getBoolean(HttpSettings.INCLUDE_RESPONSE_IN_TIME_TAKEN)) {
      try {
        httpMethod.getResponseBody();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      timeTaken+=httpMethod.getResponseReadTime();
      httpMetrics.getTotalTimer().add(httpMetrics.getReadTimer().getDuration());
    }
    try {
      this.timestamp=System.currentTimeMillis();
      this.contentType=httpMethod.getResponseContentType();
      this.statusCode=httpMethod.hasHttpResponse() ? httpMethod.getHttpResponse().getStatusLine().getStatusCode() : 0;
      this.sslInfo=httpMethod.getSSLInfo();
      this.url=httpMethod.getURI().toURL();
      httpMetrics.setTimestamp(this.timestamp);
      httpMetrics.setHttpStatus(this.statusCode);
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  if (httpRequest instanceof TestRequest) {
    TestCase tc=((TestRequest)httpRequest).getTestStep().getTestCase();
    if (tc instanceof WsdlTestCase && ((WsdlTestCase)tc).isForLoadTest()) {
      initHeadersForLoadTest(httpMethod);
      return;
    }
  }
  initHeaders(httpMethod);
  if (this.httpRequest.get() instanceof HttpRequest) {
    downloadIncludedResources=(HttpRequest)this.httpRequest.get() != null ? ((HttpRequest)this.httpRequest.get()).getDownloadIncludedResources() : false;
    if (downloadIncludedResources) {
      long before=(new Date()).getTime();
      addIncludedContentsAsAttachments();
      long after=(new Date()).getTime();
      timeTaken+=(after - before);
      httpMetrics.getTotalTimer().add(after - before);
      context.setProperty(HTMLPageSourceDownloader.MISSING_RESOURCES_LIST,downloader.getMissingResourcesList());
    }
  }
}
