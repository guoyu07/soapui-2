{
  try {
    ByteArrayOutputStream rawResponse=new ByteArrayOutputStream();
    ByteArrayOutputStream rawRequest=new ByteArrayOutputStream();
    if (!httpMethod.isFailed()) {
      rawResponse.write(String.valueOf(httpMethod.getStatusLine()).getBytes());
      rawResponse.write("\r\n".getBytes());
    }
    rawRequest.write((method + " " + String.valueOf(url)+ " "+ version+ "\r\n").getBytes());
    requestHeaders=new StringToStringMap();
    Header[] headers=httpMethod.getRequestHeaders();
    for (    Header header : headers) {
      requestHeaders.put(header.getName(),header.getValue());
      rawRequest.write(header.toExternalForm().getBytes());
    }
    if (!httpMethod.isFailed()) {
      responseHeaders=new StringToStringMap();
      headers=httpMethod.getResponseHeaders();
      for (      Header header : headers) {
        responseHeaders.put(header.getName(),header.getValue());
        rawResponse.write(header.toExternalForm().getBytes());
      }
      responseHeaders.put("#status#",String.valueOf(httpMethod.getStatusLine()));
    }
    if (httpMethod.getRequestEntity() != null) {
      rawRequest.write("\r\n".getBytes());
      if (httpMethod.getRequestEntity().isRepeatable()) {
        requestContentPos=rawRequest.size();
        httpMethod.getRequestEntity().writeRequest(rawRequest);
      }
 else       rawResponse.write("<request data not available>".getBytes());
    }
    if (!httpMethod.isFailed()) {
      rawResponse.write("\r\n".getBytes());
      rawResponse.write(httpMethod.getResponseBody());
    }
    rawResponseData=rawResponse.toByteArray();
    rawRequestData=rawRequest.toByteArray();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}
