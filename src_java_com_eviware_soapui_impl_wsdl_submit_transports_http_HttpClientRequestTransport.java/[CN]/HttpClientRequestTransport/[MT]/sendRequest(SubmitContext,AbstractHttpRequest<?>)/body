{
  HttpClient httpClient=HttpClientSupport.getHttpClient();
  ExtendedHttpMethod httpMethod=createHttpMethod(httpRequest);
  boolean createdState=false;
  HttpState httpState=(HttpState)submitContext.getProperty(SubmitContext.HTTP_STATE_PROPERTY);
  if (httpState == null) {
    httpState=new HttpState();
    submitContext.setProperty(SubmitContext.HTTP_STATE_PROPERTY,httpState);
    createdState=true;
  }
  HostConfiguration hostConfiguration=new HostConfiguration();
  String localAddress=System.getProperty("soapui.bind.address",httpRequest.getBindAddress());
  if (localAddress == null || localAddress.trim().length() == 0)   localAddress=SoapUI.getSettings().getString(HttpSettings.BIND_ADDRESS,null);
  if (localAddress != null && localAddress.trim().length() > 0) {
    try {
      hostConfiguration.setLocalAddress(InetAddress.getByName(localAddress));
    }
 catch (    Exception e) {
      SoapUI.logError(e);
    }
  }
  submitContext.removeProperty(RESPONSE);
  submitContext.setProperty(HTTP_METHOD,httpMethod);
  submitContext.setProperty(POST_METHOD,httpMethod);
  submitContext.setProperty(HTTP_CLIENT,httpClient);
  submitContext.setProperty(REQUEST_CONTENT,httpRequest.getRequestContent());
  submitContext.setProperty(HOST_CONFIGURATION,hostConfiguration);
  submitContext.setProperty(WSDL_REQUEST,httpRequest);
  submitContext.setProperty(RESPONSE_PROPERTIES,new StringToStringMap());
  for (  RequestFilter filter : filters) {
    filter.filterRequest(submitContext,httpRequest);
  }
  try {
    Settings settings=httpRequest.getSettings();
    StringToStringMap headers=httpRequest.getRequestHeaders();
    for (    String header : headers.keySet()) {
      String headerValue=headers.get(header);
      headerValue=PropertyExpansionUtils.expandProperties(submitContext,headerValue);
      httpMethod.setRequestHeader(header,headerValue);
    }
    WsdlProject project=(WsdlProject)ModelSupport.getModelItemProject(httpRequest);
    if (project != null) {
      WssCrypto crypto=project.getWssContainer().getCryptoByName(PropertyExpansionUtils.expandProperties(submitContext,httpRequest.getSslKeystore()));
      if (crypto != null && WssCrypto.STATUS_OK.equals(crypto.getStatus())) {
        hostConfiguration.getParams().setParameter(SoapUIHostConfiguration.SOAPUI_SSL_CONFIG,crypto.getSource() + " " + crypto.getPassword());
      }
    }
    httpMethod.setDumpFile(PropertyExpansionUtils.expandProperties(submitContext,httpRequest.getDumpFile()));
    if (settings.getBoolean(HttpSettings.INCLUDE_REQUEST_IN_TIME_TAKEN))     httpMethod.initStartTime();
    httpClient.executeMethod(hostConfiguration,httpMethod,httpState);
    httpMethod.getTimeTaken();
  }
 catch (  Throwable t) {
    httpMethod.setFailed(t);
    if (t instanceof Exception)     throw (Exception)t;
    SoapUI.logError(t);
    throw new Exception(t);
  }
 finally {
    for (int c=filters.size() - 1; c >= 0; c--) {
      filters.get(c).afterRequest(submitContext,httpRequest);
    }
    if (!submitContext.hasProperty(RESPONSE)) {
      createDefaultResponse(submitContext,httpRequest,httpMethod);
    }
    Response response=(Response)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE);
    StringToStringMap responseProperties=(StringToStringMap)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE_PROPERTIES);
    for (    String key : responseProperties.keySet()) {
      response.setProperty(key,responseProperties.get(key));
    }
    if (httpMethod != null) {
      httpMethod.releaseConnection();
    }
 else     log.error("PostMethod is null");
    if (createdState) {
      submitContext.setProperty(SubmitContext.HTTP_STATE_PROPERTY,null);
    }
  }
  return (Response)submitContext.getProperty(BaseHttpRequestTransport.RESPONSE);
}
