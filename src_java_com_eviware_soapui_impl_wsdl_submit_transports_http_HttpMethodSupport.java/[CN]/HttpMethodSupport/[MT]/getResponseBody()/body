{
  if (responseBody != null)   return responseBody;
  if (hasHttpResponse()) {
    long now=System.nanoTime();
    HttpEntity bufferedEntity=new BufferedHttpEntity(httpResponse.getEntity());
    long contentLength=bufferedEntity.getContentLength();
    if (metrics != null) {
      metrics.setContentLength(contentLength);
    }
    InputStream instream=bufferedEntity.getContent();
    try {
      if (maxSize == 0 || (contentLength >= 0 && contentLength <= maxSize)) {
        responseReadTime=System.nanoTime() - now;
        responseBody=EntityUtils.toByteArray(bufferedEntity);
        try {
          if (StringUtils.hasContent(dumpFile)) {
            Tools.writeAll(new FileOutputStream(dumpFile),new ByteArrayInputStream(responseBody));
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (decompress && responseBody.length > 0) {
          String compressionAlg=HttpClientSupport.getResponseCompressionType(httpResponse);
          if (compressionAlg != null) {
            try {
              responseBody=CompressionSupport.decompress(compressionAlg,responseBody);
            }
 catch (            Exception e) {
              IOException ioe=new IOException("Decompression of response failed");
              ioe.initCause(e);
              throw ioe;
            }
          }
        }
      }
 else {
        try {
          if (StringUtils.hasContent(dumpFile) && instream != null) {
            FileOutputStream fileOutputStream=new FileOutputStream(dumpFile);
            Tools.writeAll(fileOutputStream,instream);
            responseReadTime=System.nanoTime() - now;
            fileOutputStream.close();
            instream=new FileInputStream(dumpFile);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        ByteArrayOutputStream outstream=instream == null ? new ByteArrayOutputStream() : Tools.readAll(instream,maxSize);
        if (responseReadTime == 0) {
          responseReadTime=System.nanoTime() - now;
        }
        responseBody=outstream.toByteArray();
      }
    }
  finally {
      instream.close();
    }
  }
  return responseBody;
}
