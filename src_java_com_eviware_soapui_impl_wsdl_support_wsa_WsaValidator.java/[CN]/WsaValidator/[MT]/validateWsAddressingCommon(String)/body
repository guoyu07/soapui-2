{
  try {
    SoapVersion soapVersion=messageExchange.getOperation().getInterface().getSoapVersion();
    XmlObject xmlObject=XmlObject.Factory.parse(content);
    XmlObject[] envS=xmlObject.selectChildren(soapVersion.getEnvelopeQName());
    Element envelope=(Element)envS[0].getDomNode();
    header=(Element)SoapUtils.getHeaderElement(xmlObject,soapVersion,true).getDomNode();
    if (!header.hasChildNodes()) {
      throw new AssertionException(new AssertionError("WS-A not enabled"));
    }
    String wsaNameSpace=header.getAttribute("xmlns:wsa");
    if (wsaNameSpace == null || wsaNameSpace.length() == 0) {
      wsaNameSpace=envelope.getAttribute("xmlns:wsa");
      if (wsaNameSpace == null || wsaNameSpace.length() == 0) {
        throw new AssertionException(new AssertionError("WS-A version is missing."));
      }
    }
    if (wsaNameSpace.equals(WsaUtils.WS_A_VERSION_200508)) {
      wsaVersionNameSpace=WsaUtils.WS_A_VERSION_200508;
    }
 else     if (wsaNameSpace.equals(WsaUtils.WS_A_VERSION_200408)) {
      wsaVersionNameSpace=WsaUtils.WS_A_VERSION_200408;
    }
 else {
      throw new AssertionException(new AssertionError("WS-A version is wrong"));
    }
    Element actionNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"Action");
    if (actionNode == null) {
      throw new AssertionException(new AssertionError("WS-A Action property is not specified"));
    }
    String actionValue=XmlUtils.getElementText(actionNode);
    if (StringUtils.isNullOrEmpty(actionValue)) {
      throw new AssertionException(new AssertionError("WS-A Action property is empty"));
    }
    Element toNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"To");
    if (toNode == null) {
      throw new AssertionException(new AssertionError("WS-A To property is not specified"));
    }
    Element addressNode=XmlUtils.getFirstChildElementNS(toNode,wsaVersionNameSpace,"Address");
    if (addressNode == null) {
      throw new AssertionException(new AssertionError("WS-A To Address property is not specified"));
    }
    String toAddressValue=XmlUtils.getElementText(addressNode);
    if (StringUtils.isNullOrEmpty(toAddressValue)) {
      throw new AssertionException(new AssertionError("WS-A To Address property is empty"));
    }
 else {
      if (AnonymousTypeConfig.PROHIBITED.toString().equals(messageExchange.getOperation().getAnonymous()) && (toAddressValue.equals("http://www.w3.org/2005/08/addressing/anonymous") || toAddressValue.equals("http://schemas.xmlsoap.org/ws/2004/08/addressing/anonymous"))) {
      }
    }
    Element faultToNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"FaultTo");
    if (faultToNode != null) {
      addressNode=XmlUtils.getFirstChildElementNS(faultToNode,wsaVersionNameSpace,"Address");
      if (addressNode != null) {
        String faultToAddressValue=XmlUtils.getElementText(addressNode);
        if (!StringUtils.isNullOrEmpty(faultToAddressValue)) {
          if (AnonymousTypeConfig.PROHIBITED.toString().equals(messageExchange.getOperation().getAnonymous()) && (faultToAddressValue.equals("http://www.w3.org/2005/08/addressing/anonymous") || faultToAddressValue.equals("http://schemas.xmlsoap.org/ws/2004/08/addressing/anonymous"))) {
            throw new AssertionException(new AssertionError("WS-A InvalidAddressingHeader , Anonymous addresses are prohibited"));
          }
        }
      }
    }
  }
 catch (  XmlException e) {
    SoapUI.logError(e);
  }
}
