{
  String content=messageExchange.getRequestContent();
  validateWsAddressingCommon(content);
  WsdlOperation operation=messageExchange.getOperation();
  if (operation.isRequestResponse()) {
    Element msgNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"MessageID");
    if (msgNode == null) {
      throw new AssertionException(new AssertionError("WS-A MessageID property is not specified"));
    }
    String msgValue=XmlUtils.getElementText(msgNode);
    if (StringUtils.isNullOrEmpty(msgValue)) {
      throw new AssertionException(new AssertionError("WS-A MessageID property is empty"));
    }
    Element replyToNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"ReplyTo");
    if (replyToNode == null) {
      throw new AssertionException(new AssertionError("WS-A ReplyTo property is not specified"));
    }
    Element addressNode=XmlUtils.getFirstChildElementNS(replyToNode,wsaVersionNameSpace,"Address");
    if (addressNode == null) {
      throw new AssertionException(new AssertionError("WS-A ReplyTo Address property is not specified"));
    }
    String replyToAddressValue=XmlUtils.getElementText(addressNode);
    if (StringUtils.isNullOrEmpty(replyToAddressValue)) {
      throw new AssertionException(new AssertionError("WS-A ReplyTo Address property is empty"));
    }
 else {
      if (AnonymousTypeConfig.PROHIBITED.toString().equals(((WsdlMessageExchange)messageExchange).getOperation().getAnonymous()) && WsaUtils.isAnonymousAddress(replyToAddressValue)) {
        throw new AssertionException(new AssertionError("WS-A InvalidAddressingHeader ReplyTo , Anonymous addresses are prohibited"));
      }
 else       if (AnonymousTypeConfig.REQUIRED.toString().equals(((WsdlMessageExchange)messageExchange).getOperation().getAnonymous()) && !WsaUtils.isAnonymousAddress(replyToAddressValue)) {
        throw new AssertionException(new AssertionError("WS-A InvalidAddressingHeader ReplyTo , Anonymous addresses are required"));
      }
    }
  }
}
