{
  String content=messageExchange.getResponseContent();
  SoapVersion soapVersion=messageExchange.getOperation().getInterface().getSoapVersion();
  XmlObject requestXmlObject=XmlObject.Factory.parse(messageExchange.getRequestContent());
  XmlObject xmlObject=XmlObject.Factory.parse(content);
  header=(Element)SoapUtils.getHeaderElement(xmlObject,soapVersion,true).getDomNode();
  wsaVersionNameSpace=getWsaVersion(xmlObject,soapVersion);
  String requestWsaVersionNameSpace=getWsaVersion(requestXmlObject,soapVersion);
  if (wsaVersionNameSpace == null) {
    throw new AssertionException(new AssertionError("WS-A not enabled."));
  }
 else   if (!wsaVersionNameSpace.equals(requestWsaVersionNameSpace)) {
    throw new AssertionException(new AssertionError("Response has the wrong ws-a version namespace value."));
  }
  if (wsaAssertionConfiguration.isAssertAction()) {
    Element actionNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"Action");
    if (actionNode == null) {
      cumulativeErrorMsg.append("WS-A Action property is not specified. ");
    }
 else {
      String actionValue=XmlUtils.getElementText(actionNode);
      if (StringUtils.isNullOrEmpty(actionValue)) {
        cumulativeErrorMsg.append("WS-A Action property is empty. ");
      }
 else {
        String defaultWsdlAction=WsdlUtils.getDefaultWsaAction(messageExchange.getOperation(),true);
        if (!actionValue.equals(defaultWsdlAction)) {
          cumulativeErrorMsg.append("WS-A Action property should be " + defaultWsdlAction + ". ");
        }
      }
    }
  }
  validateWsAddressingCommon(content);
  if (wsaAssertionConfiguration.isAssertRelatesTo()) {
    Element relatesToNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"RelatesTo");
    if (relatesToNode == null) {
      cumulativeErrorMsg.append("WS-A RelatesTo property is not specified. ");
    }
 else {
      String relatesToValue=XmlUtils.getElementText(relatesToNode);
      if (StringUtils.isNullOrEmpty(relatesToValue)) {
        cumulativeErrorMsg.append("WS-A RelatesTo property is empty. ");
      }
 else {
        String requestMsgId=WsdlUtils.getRequestWsaMessageId(messageExchange,getWsaVersion(requestXmlObject,soapVersion));
        if (!relatesToValue.equals(requestMsgId)) {
          cumulativeErrorMsg.append("WS-A RelatesTo property is not equal to request wsa:MessageId. ");
        }
      }
    }
  }
  Element replyToNode=XmlUtils.getFirstChildElementNS(header,wsaVersionNameSpace,"ReplyTo");
  if (replyToNode != null) {
    Element addressNode=XmlUtils.getFirstChildElementNS(replyToNode,wsaVersionNameSpace,"Address");
    if (addressNode != null) {
      String replyToAddressValue=XmlUtils.getElementText(addressNode);
      if (!StringUtils.isNullOrEmpty(replyToAddressValue)) {
        if (AnonymousTypeConfig.PROHIBITED.toString().equals(((WsdlMessageExchange)messageExchange).getOperation().getAnonymous()) && WsaUtils.isAnonymousAddress(replyToAddressValue,wsaVersionNameSpace)) {
          cumulativeErrorMsg.append("WS-A InvalidAddressingHeader ReplyTo , Anonymous addresses are prohibited. ");
        }
 else         if (AnonymousTypeConfig.REQUIRED.toString().equals(((WsdlMessageExchange)messageExchange).getOperation().getAnonymous()) && !(WsaUtils.isAnonymousAddress(replyToAddressValue,wsaVersionNameSpace) || WsaUtils.isNoneAddress(replyToAddressValue,wsaVersionNameSpace))) {
          cumulativeErrorMsg.append("WS-A InvalidAddressingHeader ReplyTo , Anonymous addresses are required. ");
        }
      }
    }
  }
  if (wsaAssertionConfiguration.isAssertReplyToRefParams()) {
    NodeList requestReplyToRefProps=WsdlUtils.getRequestReplyToRefProps(messageExchange,getWsaVersion(requestXmlObject,soapVersion));
    for (int i=0; i < requestReplyToRefProps.getLength(); i++) {
      Node refProp=requestReplyToRefProps.item(i);
      String refPropName=refProp.getNodeName();
      NodeList existingResponseRefs=XmlUtils.getChildElementsByTagName(header,refPropName);
      if (existingResponseRefs != null && existingResponseRefs.getLength() > 0) {
        continue;
      }
 else {
        cumulativeErrorMsg.append("Response does not have request ReferenceProperty " + refPropName + ". ");
      }
    }
  }
  if (wsaAssertionConfiguration.isAssertFaultToRefParams()) {
    NodeList requestFaultToRefProps=WsdlUtils.getRequestFaultToRefProps(messageExchange,getWsaVersion(requestXmlObject,soapVersion));
    for (int i=0; i < requestFaultToRefProps.getLength(); i++) {
      Node refProp=requestFaultToRefProps.item(i);
      String refPropName=refProp.getNodeName();
      NodeList existingResponseRefs=XmlUtils.getChildElementsByTagName(header,refPropName);
      if (existingResponseRefs != null && existingResponseRefs.getLength() > 0) {
        continue;
      }
 else {
        cumulativeErrorMsg.append("Response does not have request ReferenceProperty " + refPropName + ". ");
      }
    }
  }
  String cumulativeError=cumulativeErrorMsg.toString();
  if (!StringUtils.isNullOrEmpty(cumulativeError)) {
    throw new AssertionException(new AssertionError(cumulativeError));
  }
}
