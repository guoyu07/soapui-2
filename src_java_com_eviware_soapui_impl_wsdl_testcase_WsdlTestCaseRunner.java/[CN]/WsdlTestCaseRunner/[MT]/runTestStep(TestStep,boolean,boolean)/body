{
  for (int i=0; i < listeners.length; i++) {
    listeners[i].beforeStep(this,runContext);
    if (status == Status.CANCELED || status == Status.FAILED)     return null;
  }
  TestStepResult stepResult=testStep.run(this,runContext);
  testStepResults.add(stepResult);
  resultCount++;
  enforceMaxResults(testCase.getMaxResults());
  for (int i=0; i < listeners.length; i++) {
    listeners[i].afterStep(this,runContext,stepResult);
  }
  if (discard && stepResult.getStatus() == TestStepStatus.OK && testCase.getDiscardOkResults() && !stepResult.isDiscarded()) {
    stepResult.discard();
  }
  if (process && stepResult.getStatus() == TestStepStatus.FAILED) {
    if (testCase.getFailOnError()) {
      error=stepResult.getError();
      fail("Cancelling due to failed test step");
    }
 else {
      runContext.setProperty(TestRunner.Status.class.getName(),TestRunner.Status.FAILED);
    }
  }
  return stepResult;
}
