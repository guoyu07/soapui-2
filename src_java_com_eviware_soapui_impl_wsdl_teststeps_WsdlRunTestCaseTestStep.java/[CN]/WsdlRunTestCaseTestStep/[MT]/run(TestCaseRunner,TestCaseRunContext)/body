{
  WsdlMessageExchangeTestStepResult result=new WsdlMessageExchangeTestStepResult(this);
  testCaseRunner=null;
  if (targetTestCase != null) {
    Enum runMode=getRunMode();
    if (runMode == RunTestCaseRunModeTypeConfig.PARALLELL) {
      runningTestCase=createTestCase(targetTestCase);
    }
 else {
      runningTestCase=targetTestCase;
      TestCaseRunner targetTestRunner=SoapUI.getTestMonitor().getTestRunner(targetTestCase);
      if (targetTestRunner != null && targetTestRunner.getStatus() == TestRunner.Status.RUNNING) {
        if (runMode == RunTestCaseRunModeTypeConfig.SINGLETON_AND_FAIL) {
          result.setStatus(TestStepStatus.FAILED);
          result.addMessage("Target TestCase is already running");
          result.stopTimer();
          runningTestCase=null;
        }
 else {
          targetTestRunner.waitUntilFinished();
        }
      }
    }
    if (runningTestCase != null) {
synchronized (runningTestCase) {
        for (        TestRunListener listener : testRunListeners)         runningTestCase.addTestRunListener(listener);
        StringList returnProperties=getReturnProperties();
        Map<String,TestProperty> props=getProperties();
        for (        String key : props.keySet()) {
          if (runningTestCase.hasProperty(key) && !returnProperties.contains(key)) {
            String value=PropertyExpander.expandProperties(testRunContext,props.get(key).getValue());
            if (StringUtils.hasContent(value) || !isIgnoreEmptyProperties())             runningTestCase.setPropertyValue(key,value);
          }
        }
        currentLabel=getLabel();
        runningTestCase.addTestRunListener(testRunListener);
        result.startTimer();
        StringToObjectMap properties=new StringToObjectMap();
        if (isCopyLoadTestProperties() && properties.containsKey(TestRunContext.LOAD_TEST_CONTEXT)) {
          properties.put(TestRunContext.THREAD_INDEX,testRunContext.getProperty(TestRunContext.THREAD_INDEX));
          properties.put(TestRunContext.TOTAL_RUN_COUNT,testRunContext.getProperty(TestRunContext.TOTAL_RUN_COUNT));
          properties.put(TestRunContext.LOAD_TEST_CONTEXT,testRunContext.getProperty(TestRunContext.LOAD_TEST_CONTEXT));
          properties.put(TestRunContext.LOAD_TEST_RUNNER,testRunContext.getProperty(TestRunContext.LOAD_TEST_RUNNER));
          properties.put(TestRunContext.RUN_COUNT,testRunContext.getProperty(TestRunContext.RUN_COUNT));
        }
        if (isCopyHttpSession() && testRunContext.hasProperty(TestRunContext.HTTP_STATE_PROPERTY)) {
          properties.put(TestRunContext.HTTP_STATE_PROPERTY,testRunContext.getProperty(TestRunContext.HTTP_STATE_PROPERTY));
        }
        properties.put(TestRunContext.INTERACTIVE,testRunContext.getProperty(TestRunContext.INTERACTIVE));
        properties.put("#CallingRunTestCaseStep#",this);
        properties.put("#CallingTestCaseRunner#",testRunner);
        properties.put("#CallingTestRunContext#",testRunContext);
        testCaseRunner=runningTestCase.run(properties,true);
        testCaseRunner.waitUntilFinished();
        result.stopTimer();
        for (        String key : returnProperties) {
          if (runningTestCase.hasProperty(key))           setPropertyValue(key,runningTestCase.getPropertyValue(key));
        }
        for (        TestStepResult testStepResult : testCaseRunner.getResults()) {
          result.addMessage(testStepResult.getTestStep().getName() + " - " + testStepResult.getStatus()+ " - "+ testStepResult.getTimeTaken());
          for (          String msg : testStepResult.getMessages()) {
            result.addMessage("- " + msg);
          }
          if (testStepResult instanceof MessageExchangeTestStepResult) {
            result.addMessages(((MessageExchangeTestStepResult)testStepResult).getMessageExchanges());
          }
        }
switch (testCaseRunner.getStatus()) {
case CANCELED:
          result.setStatus(TestStepStatus.CANCELED);
        break;
case FAILED:
      result.setStatus(TestStepStatus.FAILED);
    break;
case FINISHED:
  result.setStatus(TestStepStatus.OK);
break;
default :
result.setStatus(TestStepStatus.UNKNOWN);
break;
}
for (TestRunListener listener : testRunListeners) runningTestCase.removeTestRunListener(listener);
if (runMode == RunTestCaseRunModeTypeConfig.PARALLELL) runningTestCase.release();
runningTestCase.removeTestRunListener(testRunListener);
runningTestCase=null;
testCaseRunner=null;
}
}
}
 else {
result.setStatus(TestStepStatus.FAILED);
result.addMessage("Missing testCase in project");
result.stopTimer();
}
return result;
}
