{
  try {
    if (path == null)     return "Missing path for XPath assertion";
    if (expectedContent == null)     return "Missing content for XPath assertion";
    XmlOptions options=new XmlOptions();
    if (ignoreComments)     options.setLoadStripComments();
    XmlObject xml=XmlUtils.createXmlObject(response,options);
    String expandedPath=PropertyExpander.expandProperties(context,path);
    XmlObject[] items=xml.selectPath(expandedPath);
    AssertedXPathsContainer assertedXPathsContainer=(AssertedXPathsContainer)context.getProperty(AssertedXPathsContainer.ASSERTEDXPATHSCONTAINER_PROPERTY);
    XmlObject contentObj=null;
    String expandedContent=PropertyExpander.expandProperties(context,expectedContent);
    if (!expandedPath.endsWith("text()")) {
      try {
        contentObj=XmlUtils.createXmlObject(expandedContent,options);
      }
 catch (      Exception e) {
      }
    }
    if (items.length == 0)     throw new Exception("Missing content for xpath [" + path + "] in "+ type);
    options.setSavePrettyPrint();
    options.setSaveOuter();
    for (int c=0; c < items.length; c++) {
      try {
        AssertedXPathImpl assertedXPathImpl=null;
        if (assertedXPathsContainer != null) {
          String xpath=XmlUtils.createAbsoluteXPath(items[c].getDomNode());
          if (xpath != null) {
            XmlObject xmlObj=items[c];
            assertedXPathImpl=new AssertedXPathImpl(this,xpath,xmlObj);
            assertedXPathsContainer.addAssertedXPath(assertedXPathImpl);
          }
        }
        if (contentObj == null) {
          if (items[c] instanceof XmlAnySimpleType && !(items[c] instanceof XmlQName)) {
            String value=((XmlAnySimpleType)items[c]).getStringValue();
            String expandedValue=PropertyExpander.expandProperties(context,value);
            XMLAssert.assertEquals(expandedContent,expandedValue);
          }
 else {
            Node domNode=items[c].getDomNode();
            if (domNode.getNodeType() == Node.ELEMENT_NODE) {
              String expandedValue=PropertyExpander.expandProperties(context,XmlUtils.getElementText((Element)domNode));
              XMLAssert.assertEquals(expandedContent,expandedValue);
            }
 else {
              String expandedValue=PropertyExpander.expandProperties(context,domNode.getNodeValue());
              XMLAssert.assertEquals(expandedContent,expandedValue);
            }
          }
        }
 else {
          compareValues(contentObj.xmlText(options),items[c].xmlText(options),items[c]);
        }
        break;
      }
 catch (      Throwable e) {
        if (c == items.length - 1)         throw e;
      }
    }
  }
 catch (  Throwable e) {
    String msg="";
    if (e instanceof ComparisonFailure) {
      ComparisonFailure cf=(ComparisonFailure)e;
      String expected=cf.getExpected();
      String actual=cf.getActual();
      msg="XPathContains comparison failed, expecting [" + expected + "], actual was ["+ actual+ "]";
    }
 else {
      msg="XPathContains assertion failed for path [" + path + "] : "+ e.getClass().getSimpleName()+ ":"+ e.getMessage();
    }
    throw new AssertionException(new AssertionError(msg));
  }
  return type + " matches content for [" + path+ "]";
}
