{
  server=new Server();
  server.setThreadPool(new ThreadPool(){
    @Override public boolean dispatch(    Runnable arg0){
      SoapUI.getThreadPool().execute(arg0);
      return true;
    }
    @Override public int getIdleThreads(){
      return 0;
    }
    @Override public int getThreads(){
      return SoapUI.getThreadPool().getActiveCount();
    }
    @Override public boolean isLowOnThreads(){
      return false;
    }
    @Override public void join() throws InterruptedException {
      SoapUI.getThreadPool().awaitTermination(30,TimeUnit.SECONDS);
    }
  }
);
  server.setHandler(new ServerHandler());
  RequestLogHandler logHandler=new RequestLogHandler();
  logHandler.setRequestLog(new MockRequestLog());
  server.addHandler(logHandler);
  if (SoapUI.getSettings().getBoolean(SSLSettings.ENABLE_MOCK_SSL)) {
    sslConnector=new SslSocketConnector();
    sslConnector.setKeystore(SoapUI.getSettings().getString(SSLSettings.MOCK_KEYSTORE,null));
    sslConnector.setPassword(SoapUI.getSettings().getString(SSLSettings.MOCK_PASSWORD,null));
    sslConnector.setKeyPassword(SoapUI.getSettings().getString(SSLSettings.MOCK_KEYSTORE_PASSWORD,null));
    String truststore=SoapUI.getSettings().getString(SSLSettings.MOCK_TRUSTSTORE,null);
    if (StringUtils.hasContent(truststore)) {
      sslConnector.setTruststore(truststore);
      sslConnector.setTrustPassword(SoapUI.getSettings().getString(SSLSettings.MOCK_TRUSTSTORE_PASSWORD,null));
    }
    sslConnector.setMaxIdleTime(30000);
    sslConnector.setPort((int)SoapUI.getSettings().getLong(SSLSettings.MOCK_PORT,443));
    sslConnector.setNeedClientAuth(SoapUI.getSettings().getBoolean(SSLSettings.CLIENT_AUTHENTICATION));
    server.addConnector(sslConnector);
  }
}
