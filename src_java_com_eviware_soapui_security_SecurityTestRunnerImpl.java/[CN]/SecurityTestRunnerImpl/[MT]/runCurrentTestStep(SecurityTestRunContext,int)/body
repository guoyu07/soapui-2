{
  boolean jumpExit=false;
  TestStep currentStep=runContext.getCurrentStep();
  securityTestStepListeners=securityTest.getTestStepRunListeners(currentStep);
  if (!currentStep.isDisabled()) {
    TestStepResult stepResult=runTestStep(currentStep,true,true);
    if (stepResult == null)     jumpExit=true;
    SecurityTestStepResult securityStepResult=new SecurityTestStepResult(currentStep,stepResult);
    for (int i=0; i < securityTestListeners.length; i++) {
      if (Arrays.asList(getTestCase().getTestRunListeners()).contains(securityTestListeners[i]))       securityTestListeners[i].afterOriginalStep(this,getRunContext(),securityStepResult);
    }
    for (int i=0; i < securityTestListeners.length; i++) {
      if (Arrays.asList(getTestCase().getTestRunListeners()).contains(securityTestListeners[i]))       securityTestListeners[i].beforeStep(this,getRunContext(),stepResult);
    }
    for (int i=0; i < securityTestStepListeners.length; i++) {
      if (Arrays.asList(getTestCase().getTestRunListeners()).contains(securityTestStepListeners[i]))       securityTestStepListeners[i].beforeStep(this,getRunContext(),stepResult);
    }
    Map<String,List<SecurityCheck>> secCheckMap=securityTest.getSecurityChecksMap();
    if (secCheckMap.containsKey(currentStep.getId())) {
      List<SecurityCheck> testStepChecksList=secCheckMap.get(currentStep.getId());
      for (int i=0; i < testStepChecksList.size(); i++) {
        SecurityCheck securityCheck=testStepChecksList.get(i);
        if (stepResult.getStatus() != TestStepStatus.FAILED || securityCheck.isApplyForFailedStep()) {
          runContext.setCurrentCheckIndex(i);
          runContext.setCurrentCheckOnSecurityTestIndex(currentCheckOnSecurityTestIndex++);
          SecurityCheckResult securityCheckResult=runTestStepSecurityCheck(runContext,currentStep,securityCheck);
          securityStepResult.addSecurityCheckResult(securityCheckResult);
          if (securityCheckResult.isCanceled()) {
            jumpExit=true;
            break;
          }
 else           if (securityCheckResult.getStatus() == ResultStatus.FAILED) {
            if (getTestRunnable().getFailOnError()) {
              fail("Cancelling due to failed security scan");
            }
 else {
              getRunContext().setProperty(SecurityTestRunner.Status.class.getName(),SecurityTestRunner.Status.FAILED);
            }
          }
        }
      }
      if (securityStepResult.getStatus() == ResultStatus.INITIALIZED) {
        securityStepResult.setStatus(ResultStatus.UNKNOWN);
      }
      securityTest.putSecurityTestStepResult(currentStep,securityStepResult);
    }
    for (int i=0; i < securityTestStepListeners.length; i++) {
      if (Arrays.asList(getTestCase().getTestRunListeners()).contains(securityTestStepListeners[i]))       securityTestStepListeners[i].afterStep(this,getRunContext(),securityStepResult);
    }
    for (int i=0; i < securityTestListeners.length; i++) {
      if (Arrays.asList(getTestCase().getTestRunListeners()).contains(securityTestListeners[i]))       securityTestListeners[i].afterStep(this,getRunContext(),securityStepResult);
    }
    if (jumpExit) {
      return -2;
    }
 else     if (getGotoStepIndex() != -1) {
      currentStepIndex=getGotoStepIndex() - 1;
      gotoStep(-1);
    }
  }
  runContext.setCurrentStep(currentStepIndex + 1);
  return currentStepIndex;
}
