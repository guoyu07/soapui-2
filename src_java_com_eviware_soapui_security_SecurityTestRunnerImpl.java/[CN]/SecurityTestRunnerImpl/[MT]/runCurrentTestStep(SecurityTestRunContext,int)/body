{
  TestStep currentStep=runContext.getCurrentStep();
  securityTestStepListeners=securityTest.getTestStepRunListeners(currentStep);
  if (!currentStep.isDisabled()) {
    for (int i=0; i < securityTestListeners.length; i++) {
      securityTestListeners[i].beforeStep(this,getRunContext(),currentStep);
      if (!isRunning())       return -2;
    }
    for (int i=0; i < securityTestStepListeners.length; i++) {
      securityTestStepListeners[i].beforeStep(this,getRunContext(),currentStep);
      if (!isRunning())       return -2;
    }
    TestStepResult stepResult=runTestStep(currentStep,true,true);
    SecurityTestStepResult securityStepResult=new SecurityTestStepResult(currentStep);
    if (stepResult == null)     return -2;
    if (!isRunning())     return -2;
    Map<String,List<AbstractSecurityCheck>> secCheckMap=securityTest.getSecurityChecksMap();
    if (secCheckMap.containsKey(currentStep.getId())) {
      List<AbstractSecurityCheck> testStepChecksList=secCheckMap.get(currentStep.getId());
      for (int i=0; i < testStepChecksList.size(); i++) {
        AbstractSecurityCheck securityCheck=testStepChecksList.get(i);
        runContext.setCurrentCheckIndex(i);
        runContext.setCurrentCheckOnSecurityTestIndex(currentCheckOnSecurityTestIndex++);
        SecurityCheckResult securityCheckResult=runTestStepSecurityCheck(runContext,currentStep,securityCheck);
        securityStepResult.addSecurityRequestResult(securityCheckResult);
        if (securityCheckResult.getStatus() == SecurityStatus.FAILED) {
          if (getTestRunnable().getFailOnError()) {
            fail("Cancelling due to failed security check");
          }
 else {
            getRunContext().setProperty(SecurityTestRunner.Status.class.getName(),SecurityTestRunner.Status.FAILED);
          }
        }
      }
    }
    for (int i=0; i < securityTestStepListeners.length; i++) {
      securityTestStepListeners[i].afterStep(this,getRunContext(),securityStepResult);
      if (!isRunning())       return -2;
    }
    for (int i=0; i < securityTestListeners.length; i++) {
      securityTestListeners[i].afterStep(this,getRunContext(),securityStepResult);
    }
    if (getGotoStepIndex() != -1) {
      currentStepIndex=getGotoStepIndex() - 1;
      gotoStep(-1);
    }
  }
  runContext.setCurrentStep(currentStepIndex + 1);
  return currentStepIndex;
}
