{
  int startCheckIndex=0;
  if (items.size() > currentCheckEntriesCount) {
    if (currentCheckEntriesCount > 0)     startCheckIndex=items.size() - currentCheckEntriesCount;
 else     startCheckIndex=items.size();
  }
  if (errorsOnly && !securityCheckResult.isHasRequestsWithWarnings()) {
    checkCount--;
    int size=items.size() - 1;
    while (size >= startCheckIndex) {
      items.remove(size);
      results.remove(size);
      size--;
    }
    if (startCheckIndex > 0) {
      fireIntervalRemoved(this,startCheckIndex,size);
    }
 else {
      fireIntervalRemoved(this,startCheckIndex,size);
    }
  }
 else {
    SecurityScan securityCheck=securityCheckResult.getSecurityScan();
    securityCheckResult.detectMissingItems();
    StringBuilder outStr=new StringBuilder("SecurityScan ");
    outStr.append(checkCount).append(" [").append(securityCheck.getName()).append("] ").append(securityCheckResult.getExecutionProgressStatus()).append(", took = ").append(securityCheckResult.getTimeTaken());
    try {
      if (startCheckIndex > 0 && startCheckIndex < maxSize) {
        items.set(startCheckIndex,outStr.toString());
        SoftReference<SecurityResult> checkResultRef=new SoftReference<SecurityResult>(securityCheckResult);
        results.set(startCheckIndex,checkResultRef);
        currentCheckEntriesCount=0;
        fireContentsChanged(this,startCheckIndex,startCheckIndex);
      }
    }
 catch (    IndexOutOfBoundsException e) {
    }
  }
}
