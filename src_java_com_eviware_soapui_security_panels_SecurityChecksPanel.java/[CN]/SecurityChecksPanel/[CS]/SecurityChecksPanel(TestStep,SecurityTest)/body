{
  super(new BorderLayout());
  this.testStep=testStep;
  this.securityTest=securityTest;
  securityCheckListModel=new SecurityCheckListModel();
  securityCheckList=new JList(securityCheckListModel);
  securityTest.setListModel(securityCheckListModel);
  securityCheckList.setCellRenderer(new SecurityCheckCellRenderer());
  securityCheckList.setToolTipText("SecurityChecks for this TestStep");
  securityCheckList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  securityCheckList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent arg0){
      int ix=securityCheckList.getSelectedIndex();
      configureSecurityCheckAction.setEnabled(ix >= 0);
      removeSecurityCheckAction.setEnabled(ix >= 0);
      moveSecurityCheckUpAction.setEnabled(ix >= 0);
      moveSecurityCheckDownAction.setEnabled(ix >= 0);
      if (ix == -1)       return;
    }
  }
);
  securityCheckList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2)       return;
      int ix=securityCheckList.getSelectedIndex();
      if (ix == -1)       return;
      Object obj=securityCheckList.getModel().getElementAt(ix);
      if (obj instanceof SecurityCheck) {
        SecurityCheck chck=(SecurityCheck)obj;
        if (chck.isConfigurable())         chck.configure();
        return;
      }
    }
  }
);
  JScrollPane listScrollPane=new JScrollPane(securityCheckList);
  UISupport.addTitledBorder(listScrollPane,"Security Checks");
  JPanel p=new JPanel(new BorderLayout());
  p.add(listScrollPane,BorderLayout.CENTER);
  p.add(createPropertiesToolbar(),BorderLayout.NORTH);
  securityCheckConfigPanel=(JPanel)buildConfigPanel();
  add(p,BorderLayout.CENTER);
}
