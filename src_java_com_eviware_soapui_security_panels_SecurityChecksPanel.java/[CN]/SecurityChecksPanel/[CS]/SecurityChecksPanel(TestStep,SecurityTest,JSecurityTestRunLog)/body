{
  super(new BorderLayout());
  this.testStep=testStep;
  this.securityTest=securityTest;
  this.securityTestLog=securityTestLog;
  securityCheckListModel=new SecurityCheckListModel();
  securityCheckList=new JList(securityCheckListModel);
  securityCheckList.setCellRenderer(new SecurityCheckCellRenderer());
  securityCheckList.setToolTipText("SecurityChecks for this TestStep");
  securityCheckList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  securityCheckListPopup=new JPopupMenu();
  addSecurityCheckAction=new AddSecurityCheckAction();
  securityCheckListPopup.add(addSecurityCheckAction);
  securityCheckListPopup.addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
      while (securityCheckListPopup.getComponentCount() > 1)       securityCheckListPopup.remove(1);
      int ix=securityCheckList.getSelectedIndex();
      if (ix >= 0) {
        securityCheckListPopup.add(configureSecurityCheckAction);
        SecurityCheck check=securityCheckListModel.getSecurityCheckAt(ix);
        if (check instanceof AbstractSecurityCheckWithProperties) {
          cloneParametersAction.setSecurityCheck((AbstractSecurityCheckWithProperties)check);
          securityCheckListPopup.add(cloneParametersAction);
        }
        securityCheckListPopup.addSeparator();
        securityCheckListPopup.add(removeSecurityCheckAction);
        securityCheckListPopup.add(new ShowOnlineHelpAction(HelpUrls.RESPONSE_ASSERTIONS_HELP_URL));
      }
 else {
        securityCheckListPopup.addSeparator();
        securityCheckListPopup.add(new ShowOnlineHelpAction(HelpUrls.RESPONSE_ASSERTIONS_HELP_URL));
      }
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
    }
  }
);
  securityCheckList.setComponentPopupMenu(securityCheckListPopup);
  securityCheckList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent arg0){
      int ix=securityCheckList.getSelectedIndex();
      removeSecurityCheckAction.setEnabled(ix >= 0);
      configureSecurityCheckAction.setEnabled(ix >= 0);
      cloneParametersAction.setEnabled(ix >= 0);
      if (ix == -1)       return;
      SecurityCheck securityCheck=securityCheckListModel.getSecurityCheckAt(ix);
      configureSecurityCheckAction.setEnabled(securityCheck != null && securityCheck.isConfigurable());
      if (securityCheck instanceof AbstractSecurityCheckWithProperties) {
        cloneParametersAction.setSecurityCheck((AbstractSecurityCheckWithProperties)securityCheck);
        cloneParametersAction.setEnabled(true);
      }
      if (securityCheck != null) {
        locateSecurityCheckInLog(securityCheck);
      }
    }
  }
);
  securityCheckList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2)       return;
      int ix=securityCheckList.getSelectedIndex();
      if (ix == -1)       return;
      Object obj=securityCheckList.getModel().getElementAt(ix);
      if (obj instanceof SecurityCheck) {
        AbstractSecurityCheck chck=(AbstractSecurityCheck)obj;
        chck.setTestStep(getTestStep());
        if (chck.isConfigurable()) {
          XFormDialog dialog=SoapUI.getSoapUICore().getSecurityCheckRegistry().getUIBuilder().buildSecurityCheckConfigurationDialog(chck);
          dialog.show();
        }
        return;
      }
    }
  }
);
  JScrollPane listScrollPane=new JScrollPane(securityCheckList);
  UISupport.addTitledBorder(listScrollPane,"Security Checks");
  JPanel p=new JPanel(new BorderLayout());
  p.add(listScrollPane,BorderLayout.CENTER);
  p.add(createPropertiesToolbar(),BorderLayout.NORTH);
  securityCheckConfigPanel=(JPanel)buildConfigPanel();
  add(p,BorderLayout.CENTER);
}
