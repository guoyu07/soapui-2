{
  Xpcom.invokeLater(new Runnable(){
    public void run(){
      Mozilla mozilla=Mozilla.getInstance();
      nsIServiceManager serviceManager=mozilla.getServiceManager();
      nsIObserverService observerService=(nsIObserverService)serviceManager.getServiceByContractID("@mozilla.org/observer-service;1",nsIObserverService.NS_IOBSERVERSERVICE_IID);
      nsIObserver httpObserver=new nsIObserver(){
        protected long _lRequestCounter=0;
        public void observe(        nsISupports subject,        String sTopic,        String sData){
          if (EVENT_HTTP_ON_MODIFY_REQUEST.equals(sTopic)) {
            _lRequestCounter++;
            nsIHttpChannel httpChannel=(nsIHttpChannel)subject.queryInterface(nsIHttpChannel.NS_IHTTPCHANNEL_IID);
            nsIURI originalUri=httpChannel.getOriginalURI();
            final StringToStringsMap headersMap=new StringToStringsMap();
            httpChannel.visitRequestHeaders(new nsIHttpHeaderVisitor(){
              public void visitHeader(              String header,              String value){
                System.out.println("header:" + header + ","+ value);
                headersMap.put(header,value);
              }
              public nsISupports queryInterface(              String sIID){
                return Mozilla.queryInterface(this,sIID);
              }
            }
);
            if (httpHtmlResponseView != null && httpHtmlResponseView.isRecordHttpTrafic()) {
              HttpTestRequest httpTestRequest=(HttpTestRequest)(httpHtmlResponseView.getDocument().getRequest());
              WsdlTestCase testCase=(WsdlTestCase)httpTestRequest.getTestStep().getTestCase();
              int count=testCase.getTestStepList().size();
              HttpTestRequestStep newHttpStep=(HttpTestRequestStep)testCase.addTestStep(HttpRequestStepFactory.HTTPREQUEST_TYPE,"Http Test Step " + ++count,originalUri.getSpec(),httpChannel.getRequestMethod());
              newHttpStep.getTestRequest().setRequestHeaders(headersMap);
            }
          }
 else {
            System.out.println("HTTPObserver: Unknown event '" + sTopic + "'");
          }
        }
        public nsISupports queryInterface(        String sIID){
          return Mozilla.queryInterface(this,sIID);
        }
      }
;
      boolean blnObserverIsWeakReference=false;
      observerService.addObserver(httpObserver,EVENT_HTTP_ON_MODIFY_REQUEST,blnObserverIsWeakReference);
    }
  }
);
}
