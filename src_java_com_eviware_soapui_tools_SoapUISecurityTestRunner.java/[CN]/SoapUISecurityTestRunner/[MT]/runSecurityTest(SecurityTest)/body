{
  securityTest.addSecurityTestRunListener(new SecurityTestRunListenerAdapter(){
    private int requestIndex=0;
    @Override public void afterSecurityScanRequest(    TestCaseRunner testRunner,    SecurityTestRunContext runContext,    SecurityScanRequestResult securityCheckReqResult){
      securityScanRequestCount++;
      if (securityCheckReqResult.getStatus() == ResultStatus.FAILED) {
        securityScanAlertCount++;
      }
      log.info(securityCheckReqResult.getSecurityScan().getName() + " - " + securityCheckReqResult.getChangedParamsInfo(++requestIndex));
    }
    @Override public void afterSecurityScan(    TestCaseRunner testRunner,    SecurityTestRunContext runContext,    SecurityScanResult securityCheckResult){
      securityScanCount++;
    }
    @Override public void beforeSecurityScan(    TestCaseRunner testRunner,    SecurityTestRunContext runContext,    SecurityScan securityCheck){
      requestIndex=0;
    }
    @Override public void afterStep(    TestCaseRunner testRunner,    SecurityTestRunContext runContext,    SecurityTestStepResult result){
      if (result.getStatus() == ResultStatus.FAILED)       failedResults.add(result);
    }
  }
);
  if (isJUnitReport())   securityTest.addSecurityTestRunListener(reportCollector);
  log.info("Running SecurityTest [" + securityTest.getName() + "] in TestCase ["+ securityTest.getTestCase().getName()+ "] in TestSuite ["+ securityTest.getTestCase().getTestSuite().getName()+ "]");
  SecurityTestRunner runner=securityTest.run(null,false);
  log.info("SecurityTest [" + securityTest.getName() + "] finished with status ["+ runner.getStatus()+ "] in "+ (runner.getTimeTaken())+ "ms");
  if (isJUnitReport())   securityTest.removeSecurityTestRunListener(reportCollector);
}
