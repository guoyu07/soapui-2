{
  initGroovyLog();
  assertions.clear();
  String projectFile=getProjectFile();
  project=(WsdlProject)ProjectFactoryRegistry.getProjectFactory("wsdl").createNew(projectFile,getProjectPassword());
  if (project.isDisabled())   throw new Exception("Failed to load soapUI project file [" + projectFile + "]");
  initProject();
  ensureOutputFolder(project);
  log.info("Running soapUI tests in project [" + project.getName() + "]");
  long startTime=System.nanoTime();
  for (int c=0; c < project.getTestSuiteCount(); c++) {
    TestSuite suite=project.getTestSuiteAt(c);
    for (int i=0; i < suite.getTestCaseCount(); i++) {
      TestCase tc=suite.getTestCaseAt(i);
      addListeners(tc);
    }
  }
  for (int c=0; c < project.getTestSuiteCount(); c++) {
    WsdlTestSuite ts=project.getTestSuiteAt(c);
    if (!ts.isDisabled() && (testSuite == null || ts.getName().equalsIgnoreCase(testSuite))) {
      runSuite(ts);
      testSuiteCount++;
      while (!runningTests.isEmpty()) {
        StringBuffer buf=new StringBuffer();
        TestRunner[] runners=runningTests.toArray(new TestRunner[runningTests.size()]);
        for (int i=0; i < runners.length; i++) {
          TestRunner runner=runners[i];
          if (runner.getStatus() != TestRunner.Status.RUNNING) {
            runningTests.remove(runner);
            continue;
          }
          buf.append("\r\n- ");
          buf.append(runner.getTestCase().getTestSuite().getName()).append(':');
          buf.append(runner.getTestCase().getName()).append(':');
          buf.append(runner.getStatus()).append(':');
          TestStep currentStep=runner.getRunContext().getCurrentStep();
          if (currentStep != null) {
            buf.append(currentStep.getName());
          }
 else {
            buf.append("currentStep is null");
          }
          if (System.getProperty("soapui.dumpstacktrace","false").equals("true")) {
            Thread thread=((WsdlTestCaseRunner)runner).getThread();
            if (thread != null) {
              StackTraceElement[] trace=thread.getStackTrace();
              for (int y=0; y < trace.length; y++)               buf.append("\tat " + trace[y]);
            }
          }
        }
        if (runningTests.size() > 0) {
          log.info("Waiting for " + runners.length + " tests to finish: "+ buf.toString());
          Thread.sleep(5000);
        }
      }
    }
  }
  long timeTaken=(System.nanoTime() - startTime) / 1000000;
  if (printReport) {
    printReport(timeTaken);
  }
  exportReports(project);
  if (saveAfterRun && !project.isRemote()) {
    try {
      project.save();
    }
 catch (    Throwable t) {
      log.error("Failed to save project",t);
    }
  }
  if ((assertions.size() > 0 || failedTests.size() > 0) && !ignoreErrors) {
    throwFailureException();
  }
  return true;
}
