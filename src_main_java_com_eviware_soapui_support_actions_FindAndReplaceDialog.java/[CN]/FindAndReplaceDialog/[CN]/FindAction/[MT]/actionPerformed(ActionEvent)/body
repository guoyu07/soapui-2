{
  int pos=tweakPosition();
  int lastpos=tweakLastPosition();
  String txt=target.getText();
  if (findCombo.getSelectedItem() == null) {
    return;
  }
  String value=findCombo.getSelectedItem().toString();
  if (value.length() == 0 || (pos == txt.length() && !wrapCheck.isSelected()))   return;
  if (!caseCheck.isSelected()) {
    value=value.toLowerCase();
    txt=txt.toLowerCase();
  }
  if (pos == lastPositionF && value.equals(lastSearchedItem))   if (forwardButton.isSelected())   pos+=value.length() + 1;
 else   pos-=value.length() - 1;
  int ix=findNext(pos,txt,value);
  lastSearchedItem=value;
  lastPositionF=ix;
  if (ix != -1) {
    if (selectedLinesButton.isSelected()) {
      target.select(ix,lastpos);
    }
 else {
      target.select(ix,ix + value.length());
    }
    for (int c=0; c < findCombo.getItemCount(); c++) {
      if (findCombo.getItemAt(c).equals(value)) {
        findCombo.removeItem(c);
        break;
      }
    }
    findCombo.insertItemAt(value,0);
  }
 else {
    UISupport.showErrorMessage("String [" + value + "] not found");
  }
}
