{
  if (!isPrintReport())   return;
  TestStep currentStep=runContext.getCurrentStep();
  String securityTestName="";
  String securityScanName="";
  if (!result.getSecurityScanResultList().isEmpty()) {
    securityTestName=result.getSecurityScanResultList().get(0).getSecurityScan().getParent().getName();
    securityScanName=result.getSecurityScanResultList().get(0).getSecurityScanName();
  }
  String countPropertyName=currentStep.getName() + " run count";
  Long count=new Long(getExportCount());
  if (count == null) {
    count=new Long(0);
  }
  runContext.setProperty(countPropertyName,new Long(count.longValue() + 1));
  if (result.getStatus() == SecurityResult.ResultStatus.FAILED || isExportAll()) {
    try {
      String exportSeparator=System.getProperty(SOAPUI_EXPORT_SEPARATOR,"-");
      TestCase tc=currentStep.getTestCase();
      String nameBase=StringUtils.createFileName(securityTestName,'_') + exportSeparator + StringUtils.createFileName(securityScanName,'_')+ exportSeparator+ StringUtils.createFileName(tc.getTestSuite().getName(),'_')+ exportSeparator+ StringUtils.createFileName(tc.getName(),'_')+ exportSeparator+ StringUtils.createFileName(currentStep.getName(),'_')+ "-"+ count.longValue()+ "-"+ result.getStatus();
      WsdlTestCaseRunner callingTestCaseRunner=(WsdlTestCaseRunner)runContext.getProperty("#CallingTestCaseRunner#");
      if (callingTestCaseRunner != null) {
        WsdlTestCase ctc=callingTestCaseRunner.getTestCase();
        WsdlRunTestCaseTestStep runTestCaseTestStep=(WsdlRunTestCaseTestStep)runContext.getProperty("#CallingRunTestCaseStep#");
        nameBase=StringUtils.createFileName(securityTestName,'_') + exportSeparator + StringUtils.createFileName(ctc.getTestSuite().getName(),'_')+ exportSeparator+ StringUtils.createFileName(ctc.getName(),'_')+ exportSeparator+ StringUtils.createFileName(runTestCaseTestStep.getName(),'_')+ exportSeparator+ StringUtils.createFileName(tc.getTestSuite().getName(),'_')+ exportSeparator+ StringUtils.createFileName(tc.getName(),'_')+ exportSeparator+ StringUtils.createFileName(currentStep.getName(),'_')+ "-"+ count.longValue()+ "-"+ result.getStatus();
      }
      String absoluteOutputFolder=getAbsoluteOutputFolder(ModelSupport.getModelItemProject(tc));
      String fileName=absoluteOutputFolder + File.separator + nameBase+ ".txt";
      if (result.getStatus() == SecurityResult.ResultStatus.FAILED)       log.error(currentStep.getName() + " failed, exporting to [" + fileName+ "]");
      File file=new File(fileName);
      file.getParentFile().mkdirs();
      PrintWriter writer=new PrintWriter(file);
      result.writeTo(writer);
      writer.close();
      if (result instanceof MessageExchange) {
        Attachment[] attachments=((MessageExchange)result).getResponseAttachments();
        if (attachments != null && attachments.length > 0) {
          for (int c=0; c < attachments.length; c++) {
            fileName=nameBase + "-attachment-" + (c + 1)+ ".";
            Attachment attachment=attachments[c];
            String contentType=attachment.getContentType();
            if (!"application/octet-stream".equals(contentType) && contentType != null && contentType.indexOf('/') != -1) {
              fileName+=contentType.substring(contentType.lastIndexOf('/') + 1);
            }
 else {
              fileName+="dat";
            }
            fileName=absoluteOutputFolder + File.separator + fileName;
            FileOutputStream outFile=new FileOutputStream(fileName);
            Tools.writeAll(outFile,attachment.getInputStream());
            outFile.close();
          }
        }
      }
      setExportCount(getExportCount() + 1);
    }
 catch (    Exception e) {
      log.error("Error saving failed result: " + e,e);
    }
  }
  setTestStepCount(getTestStepCount() + 1);
}
