{
  MockitoAnnotations.initMocks(this);
  initXpath();
  doc=XmlUtils.parseXml(TestUtils.SAMPLE_SOAP_MESSAGE);
  secHeader=new WSSecHeader();
  secHeader.insertSecurityHeader(doc);
  automaticSamlEntry=new AutomaticSAMLEntry();
  automaticSamlEntry.init(wssEntryConfigMock,outgoingWssMock);
  when(wssEntryConfigMock.getConfiguration()).thenReturn(xmlObjectMock);
  automaticSamlEntry.setIssuer(ISSUER);
  automaticSamlEntry.setSubjectQualifier(SUBJECT_QUALIFIER);
  automaticSamlEntry.setSubjectName(SUBJECT_NAME);
  automaticSamlEntry.setSignatureAlgorithm(WSConstants.RSA);
  automaticSamlEntry.setDigestAlgorithm(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA1);
  createCrypto();
  when(outgoingWssMock.getWssContainer()).thenReturn(wssContainerMock);
  when(wssContainerMock.getCryptoByName(anyString())).thenReturn(wssCryptoMock);
  when(wssCryptoMock.getCrypto()).thenReturn(crypto);
  when(outgoingWssMock.getUsername()).thenReturn(ALIAS);
  when(outgoingWssMock.getPassword()).thenReturn(KEY_PASSWORD);
  when(contextMock.expand(ALIAS)).thenReturn(ALIAS);
  when(contextMock.expand(KEY_PASSWORD)).thenReturn(KEY_PASSWORD);
  when(contextMock.expand(ISSUER)).thenReturn(ISSUER);
  when(contextMock.expand(SUBJECT_NAME)).thenReturn(SUBJECT_NAME);
  when(contextMock.expand(SUBJECT_QUALIFIER)).thenReturn(SUBJECT_QUALIFIER);
  when(contextMock.expand(ATTTRIBUTE_NAME)).thenReturn(ATTTRIBUTE_NAME);
}
